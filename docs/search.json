[{"path":"https://www.pinstimation.com/articles/parallel_processing.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"PINstimation - Parallel Processing","text":"vignette describes use parallel processing different PINstimation functions. also provides several usage examples activate, deactivate parallel processing, well changing default options. sequential processing processing one task completed time tasks run processor sequence. example, sequential processing MPIN estimation various initial parameter sets entails model estimated one initial parameter set time. estimation model second initial parameter set started estimation first initial parameter set completed. parallel processing processing multiple tasks executed simultaneously independently different processors CPU cores. Note parallel processing one processor/CPU core involved. example, parallel processing MPIN estimation various initial parameter sets entails model estimated multiple initial parameter sets time. processor CPU core independently estimates MPIN model given initial parameter set. Parallel processing advantage performing tasks faster (given sufficiently large number tasks). However, costly terms CPU power, memory.","code":""},{"path":"https://www.pinstimation.com/articles/parallel_processing.html","id":"parallel-processing-with-pinstimation","dir":"Articles","previous_headings":"","what":"Parallel processing with PINstimation","title":"PINstimation - Parallel Processing","text":"Parallel processing available three functions, typically associated long running time. MPIN model estimation functions mpin_ml(), mpin_ecm() Data aggregation function: aggregate_trades() However, calls functions can use parallel processing. MPIN model estimation: use parallel processing conditional number initial parameter sets used estimation. Data aggregation: Parallel processing available argument timelag equal zero. entails parallel processing available Tick algorithm, argument timelag ignored Tick algorithm used. Activating, deactivating parallel processing done using argument is_parallel available functions. default value argument TRUE data aggregation, FALSE MPIN model estimation. parallel processing depends two additional options: number cores used functions threshold initial parameter sets needed activate parallel processing MPIN estimations.","code":""},{"path":"https://www.pinstimation.com/articles/parallel_processing.html","id":"option-1-number-of-cores-used","dir":"Articles","previous_headings":"","what":"Option 1: Number of cores used","title":"PINstimation - Parallel Processing","text":"first option number CPU cores used parallel processing. default, package detects number cores available machine, uses one core run function, argument is_parallel set TRUE. option stored , accessed R option pinstimation.parallel.cores. change number CPU cores used PINstimation functions, user needs set option pinstimation.parallel.cores desired number cores. example, user can set number cores 2 using following code: read number cores used PINstimation functions, user can use function getOption follows: value assigned option pinstimation.parallel.cores valid, either non-numeric, non-positive available number cores; automatically set default value, .e., number available cores minus one. However, set default value one functions using parallel processing called.","code":"options(pinstimation.parallel.cores = 2) getOption(\"pinstimation.parallel.cores\") ## [1] 2 options(pinstimation.parallel.cores = -2) getOption(\"pinstimation.parallel.cores\") ## [1] -2 xdata <- hfdata xdata$volume <- NULL aggdata <- aggregate_trades(xdata, timelag = 500, algorithm = \"LR\") [+] Trade classification started   | [#] Classification algorithm        : LR algorithm   | [#] Number of trades in dataset     : 100 000 trades   | [#] Time lag of lagged variables    : 500 milliseconds   | [1] Computing lagged variables      : using parallel processing   |+++++++++++++++++++++++++++++++++++++| 100% of variables computed   | [#] Computed lagged variables       : in 4.384 seconds   | [2] Computing aggregated trades     : using lagged variables [+] Trade classification completed getOption(\"pinstimation.parallel.cores\") ## system  ##      3"},{"path":"https://www.pinstimation.com/articles/parallel_processing.html","id":"option-2-threshold-of-initial-parameter-sets","dir":"Articles","previous_headings":"","what":"Option 2: Threshold of initial parameter sets","title":"PINstimation - Parallel Processing","text":"second option minimum number initial parameter sets used MPIN estimation, parallel processing activated. default, threshold set 100. Note parallel processing used number initial sets threshold, even argument is_parallel set TRUE. option stored , accessed R option pinstimation.parallel.threshold. change threshold initial parameter sets functions mpin_ml, mpin_ecm, user needs set option pinstimation.parallel.threshold desired threshold. value threshold integer. negative integer equivalent threshold zero, parallel processing used number initial parameter sets, course, provided argument is_parallel set TRUE. value assigned option pinstimation.parallel.threshold integer; automatically set default value, .e., 100. However, set default value one mpin functions run parallel processing. order set threshold initial parameter sets 20, user can use following code: Setting threshold 20 means parallel processing used number initial parameter sets used MPIN estimation equal exceeds 20, otherwise, standard sequential processing used. course, parallel processing active, argument is_parallel takes value TRUE.","code":"options(\"pinstimation.parallel.threshold\" = 20)"},{"path":"https://www.pinstimation.com/articles/parallel_processing.html","id":"illustrative-example","dir":"Articles","previous_headings":"","what":"Illustrative Example","title":"PINstimation - Parallel Processing","text":", illustrate interaction argument is_parallel, option pinstimation.parallel.threshold presenting three use scenarios function mpin_ecm:","code":""},{"path":"https://www.pinstimation.com/articles/parallel_processing.html","id":"sequential-processing","dir":"Articles","previous_headings":"Illustrative Example","what":"Sequential processing","title":"PINstimation - Parallel Processing","text":"sequential processing used argument is_parallel set FALSE, missing since default value FALSE. output estimation displayed . Note badge Sequential displayed green, meaning sequential processing used.","code":"ecm.1 <- mpin_ecm(data = dailytrades, is_parallel = FALSE) [+] MPIN estimation started   |[1] Computing the range of layers    : information layers from 1 to 8   |[2] Computing initial parameter sets : using algorithm of Ersan (2016)   |[=] Selecting initial parameter sets : max 100 initial sets per estimation   |[3] Estimating the MPIN model        : Expectation-Conditional Maximization algorithm   |+++++++++++++++++++++++++++++++++++++| 100% of estimation completed [8 layer(s)]   |[3] Selecting the optimal model      : using lowest Information Criterion (BIC) [+] MPIN estimation completed ## ---------------------------------- ## MPIN estimation completed successfully ## ---------------------------------- ## Likelihood factorization: Ersan (2016) ## Estimation Algorithm     : Expectation Conditional Maximization ## Initial parameter sets   : Ersan (2016), Ersan and Alici (2016) ## Info. layers detected    : using Ghachem and Ersan (2022) [ECM] ## Selection criterion  : Bayes Information Criterion (BIC) ## ---------------------------------- ## 525 initial set(s) are used for all 8 estimations ## Type object@models for the estimation results for all models.  ## Type getSummary(object) for a summary of estimates for all models. ##  ##  MPIN model   Optimal Estimation   Sequential   ##  ## ===============  ============================ ## Variables        Estimates                    ## ===============  ============================ ## alpha            0.216667, 0.050000, 0.483333 ## delta            0.230769, 0.666667, 0.034483 ## mu               602.88, 986.45, 1506.84      ## eps.b            336.91                       ## eps.s            335.89                       ## ----                                          ## Likelihood       (643.458)                    ## mpin(j)          0.082619, 0.031196, 0.460648 ## mpin             0.574463                     ## ----                                          ## AIC | BIC | AWE  1308.92, 1331.95, 1409.99    ## ===============  ============================ ##  ##  ## Table: Summary of 8 MPIN estimations by ECM algorithm ##  ##              BIC      AIC      AWE    layers  #Sets  time ## ---------  -------  -------  -------  ------  -----  ---- ## model.1    6473.41  6462.94  6508.88    1         5  0.06 ## model.2    1633.51  1616.76  1690.27    2        15  0.45 ## model.3    1331.95  1308.92  1409.99    3        35  0.89 ## model.4**  1331.95  1308.92  1409.99    3        70  1.86 ## model.5    1331.95  1308.92  1409.99    3       100  2.81 ## model.6    1331.95  1308.92  1409.99    3       100  2.67 ## model.7    1342.58  1313.26  1441.9     4       100  3.31 ## model.8    1342.58  1313.26  1441.9     4       100  3.02 ##  ## ------- ## Running time: 15.07 seconds"},{"path":"https://www.pinstimation.com/articles/parallel_processing.html","id":"parallel-processing-number-of-sets-below-the-threshold","dir":"Articles","previous_headings":"Illustrative Example","what":"Parallel processing | number of sets below the threshold","title":"PINstimation - Parallel Processing","text":"parallel processing used argument is_parallel set TRUE. value argument layers set 2, number initial parameter sets used 15. number threshold set , parallel processing used, even though argument is_parallel set TRUE. output estimation displayed . Note badge Parallel displayed red, meaning parallel processing activated, used.","code":"ecm.2 <- mpin_ecm(dailytrades, layers = 2, is_parallel = TRUE) [+] MPIN estimation started   |[1] Using user-selected layers       : 2 layer(s) assumed in the data   |[2] Computing initial parameter sets : using algorithm of Ersan (2016)   |[3] Estimating the MPIN model        : Expectation-Conditional Maximization algorithm   |+++++++++++++++++++++++++++++++++++++| 100% of estimation completed [2 layer(s)] [+] MPIN estimation completed ## ---------------------------------- ## MPIN estimation completed successfully ## ---------------------------------- ## Likelihood factorization: Ersan (2016) ## Estimation Algorithm     : Expectation Conditional Maximization ## Initial parameter sets   : Ersan (2016), Ersan and Alici (2016) ## Info. layers in the data: provided by the user ## Selection criterion  : Bayes Information Criterion (BIC) ## ---------------------------------- ## 15 initial set(s) are used for the 'current' estimation  ## Type object@initialsets to see the initial parameter sets used. ##  ##  ##  MPIN model   Regular Estimation   Parallel   ##  ## ===============  ========================= ## Variables        Estimates                 ## ===============  ========================= ## alpha            0.266667, 0.483333        ## delta            0.312500, 0.034483        ## mu               677.91, 1512.36           ## eps.b            331.07                    ## eps.s            338.2                     ## ----                                       ## Likelihood       (800.379)                 ## mpin(j)          0.114341, 0.462343        ## mpin             0.576684                  ## ----                                       ## AIC | BIC | AWE  1616.76, 1633.51, 1690.27 ## ===============  ========================= ##  ## ------- ## Running time: 0.44 seconds"},{"path":"https://www.pinstimation.com/articles/parallel_processing.html","id":"parallel-processing-number-of-sets-above-the-threshold","dir":"Articles","previous_headings":"Illustrative Example","what":"Parallel processing | number of sets above the threshold","title":"PINstimation - Parallel Processing","text":"parallel processing used argument is_parallel set TRUE, missing since default value TRUE. value argument layers set 3, number initial parameter sets used 35. number threshold set , parallel processing used. output estimation displayed . Note badge Parallel displayed green, meaning parallel processing activated, used.","code":"ecm.3 <- mpin_ecm(dailytrades, layers = 3, is_parallel = TRUE) [+] MPIN estimation started   |[1] Using user-selected layers       : 3 layer(s) assumed in the data   |[2] Computing initial parameter sets : using algorithm of Ersan (2016)   |[3] Estimating the MPIN model        : Expectation-Conditional Maximization algorithm   |+++++++++++++++++++++++++++++++++++++| 100% of estimation completed [3 layer(s)] [+] MPIN estimation completed ## ---------------------------------- ## MPIN estimation completed successfully ## ---------------------------------- ## Likelihood factorization: Ersan (2016) ## Estimation Algorithm     : Expectation Conditional Maximization ## Initial parameter sets   : Ersan (2016), Ersan and Alici (2016) ## Info. layers in the data: provided by the user ## Selection criterion  : Bayes Information Criterion (BIC) ## ---------------------------------- ## 35 initial set(s) are used for the 'current' estimation  ## Type object@initialsets to see the initial parameter sets used. ##  ##  ##  MPIN model   Regular Estimation   Parallel   ##  ## ===============  ============================ ## Variables        Estimates                    ## ===============  ============================ ## alpha            0.216667, 0.050000, 0.483333 ## delta            0.230769, 0.666667, 0.034483 ## mu               602.84, 986.42, 1506.78      ## eps.b            336.92                       ## eps.s            335.89                       ## ----                                          ## Likelihood       (643.458)                    ## mpin(j)          0.082614, 0.031196, 0.460638 ## mpin             0.574448                     ## ----                                          ## AIC | BIC | AWE  1308.92, 1331.95, 1409.99    ## ===============  ============================ ##  ## ------- ## Running time: 4.245 seconds"},{"path":"https://www.pinstimation.com/articles/parallel_processing.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"Getting help","title":"PINstimation - Parallel Processing","text":"encounter clear bug, please file issue minimal reproducible example GitHub.","code":""},{"path":"https://www.pinstimation.com/articles/PINstimation.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Get started","text":"vignette describes install package ‘PINstimation’, either stable version CRAN, development version Github. also provides several usage examples use different functionalities package.","code":""},{"path":"https://www.pinstimation.com/articles/PINstimation.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get started","text":"easiest way get PINstimation following: get bug fix use feature development version, can install development version PINstimation GitHub. Loading package","code":"install.packages(\"PINstimation\") # install.packages(\"devtools\") # library(devtools) devtools::install_github(\"monty-se/PINstimation\") library(PINstimation)"},{"path":"https://www.pinstimation.com/articles/PINstimation.html","id":"note-to-frequent-users","dir":"Articles","previous_headings":"","what":"Note to frequent users","title":"Get started","text":"frequent user PINstimation, might want avoid repetitively loading package PINstimation whenever open new R session. can adding PINstimation .R profile either manually, using function load_pinstimation_for_good(). automatically load PINstimation, run load_pinstimation_for_good(), following code added .R profile. restart R session, PINstimation loaded automatically, whenever new R session started. remove automatic loading PINstimation, just open .R profile editing usethis::edit_r_profile(), find code , delete .","code":"if (interactive()) suppressMessages(require(PINstimation))"},{"path":"https://www.pinstimation.com/articles/PINstimation.html","id":"usage-examples","dir":"Articles","previous_headings":"","what":"Usage examples","title":"Get started","text":", find five usage examples main functions package. Example 1: [PIN] Use daily trade data estimate standard probability informed trading. Example 2: [MPIN] Use daily trade data estimate number layers data, well multi-layer probability informed trading. Example 3: [AdjPIN] Use daily trade data estimate adjusted probability informed trading. Example 4: [VPIN] Use high-frequency data estimate volume-adjusted probability informed trading. Example 5: Classify high frequency trades daily trading data, use estimate adjusted probability informed trading using Maximum-likelihood method, Expectation-Maximization algorithm.","code":""},{"path":"https://www.pinstimation.com/articles/PINstimation.html","id":"example-1-estimate-the-pin-model","dir":"Articles","previous_headings":"Usage examples","what":"Example 1: Estimate the PIN model","title":"Get started","text":"estimate PIN model preloaded dataset dailytrades using initial parameter sets Ersan & Alici (2006).","code":"estimate <- pin_ea(dailytrades) ## [+] PIN Estimation started  ##   |[1] Likelihood function factorization: Ersan (2016) ##   |[2] Loading initial parameter sets   : 5 EA initial set(s) loaded ##   |[3] Estimating PIN model (1996)      : Using Maximum Likelihood Estimation ##   |+++++++++++++++++++++++++++++++++++++| 100% of PIN estimation completed ## [+] PIN Estimation completed show(estimate) ## ---------------------------------- ## PIN estimation completed successfully ## ---------------------------------- ## Initial parameter sets   : Ersan and Alici (2016) ## Likelihood factorization: Ersan (2016) ## ---------------------------------- ## 5 initial set(s) are used in the estimation  ## Type object@initialsets to see the initial parameter sets used ##  ##  PIN model   ##  ## ==========  =========== ## Variables   Estimates   ## ==========  =========== ## alpha       0.749997    ## delta       0.133334    ## mu          1193.52     ## eps.b       357.27      ## eps.s       328.63      ## ----                    ## Likelihood  (3226.469)  ## PIN         0.566172    ## ==========  =========== ##  ## ------- ## Running time: 1.125 seconds"},{"path":"https://www.pinstimation.com/articles/PINstimation.html","id":"example-2-estimate-the-multilayer-pin-model","dir":"Articles","previous_headings":"Usage examples","what":"Example 2: Estimate the Multilayer PIN model","title":"Get started","text":"run estimation MPIN model preloaded dataset dailytrades using: maximum-likelihood method. ECM algorithm. Compare aggregate parameters obtained ML, ECM estimations. Display summary model estimates number layers.","code":"ml_estimate <- mpin_ml(dailytrades) ## [+] MPIN estimation started ##   |[1] Detecting layers from data       : using Ersan and Ghachem (2022a) ##   |[=] Number of layers in the data     : 3 information layer(s) detected ##   |[2] Computing initial parameter sets : using algorithm of Ersan (2016) ##   |[3] Estimating the MPIN model        : Maximum-likelihood standard estimation ##   |+++++++++++++++++++++++++++++++++++++| 100% of mpin estimation completed ## [+] MPIN estimation completed ecm_estimate <- mpin_ecm(dailytrades) ## [+] MPIN estimation started ##   |[1] Computing the range of layers    : information layers from 1 to 8 ##   |[2] Computing initial parameter sets : using algorithm of Ersan (2016) ##   |[=] Selecting initial parameter sets : max 100 initial sets per estimation ##   |[3] Estimating the MPIN model        : Expectation-Conditional Maximization algorithm ##   |+++++++++++++++++++++++++++++++++++++| 100% of estimation completed [8 layer(s)] ##   |[3] Selecting the optimal model      : using lowest Information Criterion (BIC) ## [+] MPIN estimation completed mpin_comparison <- rbind(ml_estimate@aggregates, ecm_estimate@aggregates) rownames(mpin_comparison) <- c(\"ML\", \"ECM\") ## Probabilities of ML, and ECM estimations of the MPIN model ##        alpha     delta       mu    eps.b    eps.s ## ML  0.750004 0.1333320 1210.984 336.9118 335.8871 ## ECM 0.750000 0.1333333 1211.001 336.9052 335.8866 summary <- getSummary(ecm_estimate) ##          layers em.layers  MPIN Likelihood    AIC    BIC    AWE ## Model[1]      1         1 0.566  -3226.469 6462.9 6473.4 6508.9 ## Model[2]      2         2 0.577   -800.379 1616.8 1633.5 1690.3 ## Model[3]      3         3 0.574   -643.458 1308.9 1332.0 1410.0 ## Model[4]      4         3 0.574   -643.458 1308.9 1332.0 1410.0 ## Model[5]      5         3 0.574   -643.458 1308.9 1332.0 1410.0 ## Model[6]      6         3 0.574   -643.458 1308.9 1332.0 1410.0 ## Model[7]      7         4 0.575   -642.631 1313.3 1342.6 1441.9 ## Model[8]      8         4 0.575   -642.631 1313.3 1342.6 1441.9"},{"path":"https://www.pinstimation.com/articles/PINstimation.html","id":"example-3-estimate-the-adjusted-pin-model","dir":"Articles","previous_headings":"Usage examples","what":"Example 3: Estimate the Adjusted PIN model","title":"Get started","text":"estimate adjusted PIN model preloaded dataset dailytrades using 20 initial parameter sets computed algorithm Ersan Ghachem (2022b).","code":"estimate_adjpin <- adjpin(dailytrades, initialsets = \"GE\") ## [+] AdjPIN estimation started ##   |[1] Computing initial parameter sets : 20 GE initial sets generated ##   |[2] Estimating the AdjPIN model      : Expectation-Conditional Maximization algorithm ##   |+++++++++++++++++++++++++++++++++++++| 100% of AdjPIN estimation completed ## [+] AdjPIN estimation completed show(estimate_adjpin) ## ---------------------------------- ## AdjPIN estimation completed successfully ## ---------------------------------- ## Likelihood factorization: Ersan and Ghachem (2022b) ## Estimation Algorithm     : Expectation-Conditional Maximization ## Initial parameter sets   : Ersan and Ghachem (2022b) ## Model Restrictions   : Unrestricted model ## ---------------------------------- ## 20 initial set(s) are used in the estimation  ## Type object@initialsets to see the initial parameter sets used ##  ##  AdjPIN model   ##  ## ===========  ============== ## Variables    Estimates      ## ===========  ============== ## alpha        0.733333       ## delta        0.136364       ## theta        0.0625         ## theta'       0.636364       ## ----                        ## eps.b        337.16         ## eps.s        334.77         ## mu.b         599.14         ## mu.s         872.4          ## d.b          912.75         ## d.s          2.67           ## ----                        ## Likelihood   (893.941)      ## adjPIN       0.295176       ## PSOS         0.279842       ## ===========  ============== ##  ## ------- ## Running time: 1.135 seconds"},{"path":"https://www.pinstimation.com/articles/PINstimation.html","id":"example-4-estimate-the-volume-adjusted-pin-model","dir":"Articles","previous_headings":"Usage examples","what":"Example 4: Estimate the Volume-adjusted PIN model","title":"Get started","text":"run VPIN estimation preloaded dataset hfdata timebarsize 5 minutes (300 seconds). Plot unweighted daily vpin stored variable dvpin dataframe dailyvpin stored slot @dailyvpin object estimate.vpin.","code":"estimate.vpin <- vpin(hfdata, timebarsize = 300) ## [+] VPIN Estimation started. ##   |-[1] Checking and preparing the data... ##   |-[2] Creating 300-second timebars... ##   |-[3] Calculating Volume Bucket Size (VBS) and Sigma(DP)... ##   |-[4] Breaking up large 300-second timebars' volume... ##   |-[5] Assigning 300-second timebars into buckets... ##   |-[6] Balancing timebars and adjusting bucket sizes to VBS... ##   |-[7] Calculating aggregate bucket data... ##   |-[8] Calculating VPIN vector... ## [+] VPIN estimation completed show(estimate.vpin) ## ---------------------------------- ## VPIN estimation completed successfully. ## ---------------------------------- ## Type object@vpin to access the VPIN vector. ## Type object@bucketdata to access data used to construct the VPIN vector. ## Type object@dailyvpin to access the daily VPIN vectors. ##  ## [+] VPIN descriptive statistics ##  ## |      | Min.  | 1st Qu. | Median | Mean  | 3rd Qu. | Max.  | NA's | ## |:-----|:-----:|:-------:|:------:|:-----:|:-------:|:-----:|:----:| ## |value | 0.101 |  0.185  | 0.238  | 0.244 |  0.29   | 0.636 |  49  | ##  ##  ## [+] VPIN parameters ##  ## | tbSize | buckets | samplength |   VBS    | #days | ## |:------:|:-------:|:----------:|:--------:|:-----:| ## |  300   |   50    |     50     | 36321.25 |  77   | ##  ## ------- ## Running time: 3.753 seconds plot(estimate.vpin@dailyvpin$dvpin ~seq_len(nrow(estimate.vpin@dailyvpin)),      lwd=1 , type=\"l\" , bty=\"n\" , xlab=\"day\" , ylab=\"daily vpin\",       col=rgb(0.2,0.4,0.6,0.8) )"},{"path":"https://www.pinstimation.com/articles/PINstimation.html","id":"example-5-estimate-the-adjpin-model-using-aggregated-high-frequency-data","dir":"Articles","previous_headings":"Usage examples","what":"Example 5: Estimate the AdjPIN model using aggregated high-frequency data","title":"Get started","text":"use preloaded high-frequency dataset hfdata, prepare aggregation, extract 500 000 trades. classify data using LR algorithm time lag 500 milliseconds (0.5 s), using function aggregate_data(). use obtained dataset estimate (adjusted) probability informed trading via two available estimated methods, .e, standard Maximum-likelihood method, Expectation-Maximization algorithm. Compare estimated parameters obtained ML, ECM parameters.","code":"data <- hfdata data$volume <- NULL daytrades <- aggregate_trades(data, algorithm = \"LR\", timelag = 500) ## [+] Trade classification started ##   |[=] Classification algorithm         : LR algorithm ##   |[=] Number of trades in dataset        : 100 000 trades ##   |[=] Time lag of lagged variables     : 500 milliseconds ##   |[1] Computing lagged variables         : using parallel processing ##   |+++++++++++++++++++++++++++++++++++++| 100% of variables computed ##   |[=] Computed lagged variables          : in 4.956 seconds ##   |[2] Computing aggregated trades      : using lagged variables ## [+] Trade classification completed adjpin_ml <- adjpin(daytrades, method = \"ML\", initialsets = \"GE\") ## [+] AdjPIN estimation started ##   |[1] Computing initial parameter sets : 20 GE initial sets generated ##   |[2] Estimating the AdjPIN model      : Maximum-likelihood Standard Estimation ##   |+++++++++++++++++++++++++++++++++++++| 100% of AdjPIN estimation completed ## [+] AdjPIN estimation completed adjpin_ecm <- adjpin(daytrades, method = \"ECM\", initialsets = \"GE\") ## [+] AdjPIN estimation started ##   |[1] Computing initial parameter sets : 20 GE initial sets generated ##   |[2] Estimating the AdjPIN model      : Expectation-Conditional Maximization algorithm ##   |+++++++++++++++++++++++++++++++++++++| 100% of AdjPIN estimation completed ## [+] AdjPIN estimation completed adj.prob <- rbind(adjpin_ml@parameters[1:4], adjpin_ecm@parameters[1:4]) rownames(adj.prob) <- c(\"ML\", \"ECM\") ## Probabilities of ML, and ECM estimations of the AdjPIN model ##         alpha     delta     theta    thetap ## ML  0.5925374 0.1511567 0.3597389 0.9999995 ## ECM 0.5925420 0.1512519 0.3597632 1.0000000 adj.params <- rbind(adjpin_ml@parameters[5:10], adjpin_ecm@parameters[5:10]) rownames(adj.params) <- c(\"ML\", \"ECM\") ## Rate parameters of ML and ECM estimations of the AdjPIN model ##        eps.b    eps.s     mu.b     mu.s      d.b      d.s ## ML  549.8239 546.3564 47.76120 71.67589 212.7528 223.7200 ## ECM 549.8333 546.3333 47.76282 71.76037 212.7463 223.7497"},{"path":"https://www.pinstimation.com/articles/PINstimation.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"Getting help","title":"Get started","text":"encounter clear bug, please file issue minimal reproducible example GitHub.","code":""},{"path":"https://www.pinstimation.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Montasser Ghachem. Author, maintainer, copyright holder. Oguz Ersan. Author.","code":""},{"path":"https://www.pinstimation.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ghachem M, Ersan O (2022). PINstimation: Estimation Probability Informed Trading. https://www.pinstimation.com, https://github.com/monty-se/PINstimation.","code":"@Manual{,   title = {PINstimation: Estimation of the Probability of Informed Trading},   author = {Montasser Ghachem and Oguz Ersan},   year = {2022},   note = {https://www.pinstimation.com, https://github.com/monty-se/PINstimation}, }"},{"path":[]},{"path":[]},{"path":"https://www.pinstimation.com/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"PINstimation - A package for the estimation of models of probability of informed trading","text":"PINstimation provides utilities estimation probability informed trading models: original PIN (PIN) ‘Easley O’Hara (1992)’ Easley et al. (1996); multilayer PIN (MPIN) Ersan (2016); Adjusted PIN (AdjPIN) Duarte Young (2009); volume- synchronized PIN (VPIN) Easley et al. (2011, 2012). Various computation methods suggested literature included. Data simulation tools trade classification algorithms among supplementary utilities. package enables fast precise solutions sophisticated, error-prone time-consuming estimation procedure probability informed trading measures, compact sense detailed estimation results can achieved solely use raw trade level data.","code":""},{"path":"https://www.pinstimation.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"PINstimation - A package for the estimation of models of probability of informed trading","text":"easiest way get PINstimation following: get bugfix use feature development version, can install development version PINstimation GitHub. Loading package","code":"install.packages(\"PINstimation\") # install.packages(\"devtools\") # library(devtools) devtools::install_github(\"monty-se/PINstimation\") library(PINstimation)"},{"path":"https://www.pinstimation.com/index.html","id":"note-to-frequent-users","dir":"","previous_headings":"","what":"Note to frequent users","title":"PINstimation - A package for the estimation of models of probability of informed trading","text":"frequent user PINstimation, might want avoid repetitively loading package PINstimation whenever open new R session. can adding PINstimation .R profile either manually, using function load_pinstimation_for_good(). automatically load PINstimation, run load_pinstimation_for_good(), following code added .R profile. restart R session, PINstimation loaded automatically, whenever new R session started. remove automatic loading PINstimation, just open .R profile editing usethis::edit_r_profile(), find code , delete .","code":"if (interactive()) suppressMessages(require(PINstimation))"},{"path":"https://www.pinstimation.com/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"PINstimation - A package for the estimation of models of probability of informed trading","text":"smooth introduction , useful tips main functionalities package, please refer : sections Get Started, Online documentation package site. package documentation PDF format available download . overview scientific research underlying package available .","code":""},{"path":"https://www.pinstimation.com/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"PINstimation - A package for the estimation of models of probability of informed trading","text":"package makes series original contributions literature: efficient, user-friendly, comprehensive implementation standard models probability informed trading. first implementation estimation multilayer probability informed trading (MPIN) developed Ersan (2016). comprehensive treatment estimation adjusted probability informed trading introduced Duarte Young (2009). includes implementation factorization AdjPIN likelihood function, various algorithms generate initial parameter sets, MLE method. introduction expectation-conditional maximization (ECM) algorithm alternative method estimate models probability informed trading. contribution theoretical computational. theoretical contribution included paper Ghachem Ersan (2022b). implementation ECM algorithm allows estimation PIN, MPIN, well adjusted PIN model. Implementation three layer-detection algorithms, namely preexistent algorithm Ersan (2016), well two newly developed algorithms, described Ersan Ghachem (2022a), Ghachem Ersan (2022b), respectively. first implementation estimation volume-synchronized probability informed trading (MPIN) introduced Easley et al (2011, 2012). One --function trade classification buyer-initiated seller-initiated trades implements standard algorithms field, namely Tick, Quote, LR, EMO.","code":""},{"path":"https://www.pinstimation.com/index.html","id":"alternative-packages","dir":"","previous_headings":"","what":"Alternative packages","title":"PINstimation - A package for the estimation of models of probability of informed trading","text":"knowledge, two preexisting R packages estimation models probability informed trading: pinbasic, InfoTrad.","code":""},{"path":"https://www.pinstimation.com/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"PINstimation - A package for the estimation of models of probability of informed trading","text":"encounter clear bug, please file issue minimal reproducible example GitHub.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://www.pinstimation.com/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://www.pinstimation.com/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://www.pinstimation.com/reference/adjpin.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of adjusted PIN model — adjpin","title":"Estimation of adjusted PIN model — adjpin","text":"Estimates Adjusted Probability Informed Trading (adjPIN) well Probability Symmetric Order-flow Shock (PSOS) AdjPIN model Duarte Young(2009).","code":""},{"path":"https://www.pinstimation.com/reference/adjpin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of adjusted PIN model — adjpin","text":"","code":"adjpin(data, method = \"ECM\", initialsets = \"GE\", num_init = 20,               restricted = list(), ..., verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/adjpin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of adjusted PIN model — adjpin","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). method character string referring method used estimate model Duarte Young (2009) . takes one two values: \"ML\" refers standard maximum likelihood estimation, \"ECM\" refers expectation-conditional maximization algorithm. default value \"ECM\". Details ECM method, comparative results can found Ghachem Ersan (2022a) , Ghachem Ersan (2022b) . initialsets can either character string referring prebuilt algorithms generating initial parameter sets dataframe containing custom initial parameter sets. initialsets character string, refers method generation initial parameter sets, takes one three values: \"GE\", \"CL\", \"RANDOM\". \"GE\" refers initial parameter sets generated algorithm Ersan Ghachem (2022b) , implemented initials_adjpin(), \"CL\" refers initial parameter sets generated algorithm Cheng Lai (2021) , implemented initials_adjpin_cl(), \"RANDOM\" generates random initial parameter sets implemented initials_adjpin_rnd(). default value \"GE\". initialsets dataframe, function adjpin() estimate AdjPIN model using provided initial parameter sets. num_init integer specifying maximum number initial parameter sets used estimation. initialsets=\"GE\", generation initial parameter sets stop number initial parameter sets reaches num_init. can stop earlier number possible generated initial parameter sets lower num_init. initialsets=\"RANDOM\", exactly num_init initial parameter sets returned. initialsets=\"CL\": num_init ignored, 256 initial parameter sets used. default value 20. [] argument num_init ignored argument initialsets dataframe. restricted binary list allows estimating restricted AdjPIN models specifying model parameters assumed equal. contains one multiple following four elements {theta, mu, eps, d}. instance, theta set TRUE, probability liquidity shock -information days, information days assumed (\\(\\theta\\)=\\(\\theta'\\)). remaining rate elements {mu, eps, d} set TRUE, (say  mu=TRUE), rate assumed buy side, sell side (\\(\\mu\\)b=\\(\\mu\\)s). one element set TRUE, restrictions combined. instance, argument restricted set list(theta=TRUE, eps=TRUE, d=TRUE), restricted AdjPIN model estimated, \\(\\theta\\)=\\(\\theta'\\), \\(\\epsilon\\)b=\\(\\epsilon\\)s, \\(\\Delta\\)b=\\(\\Delta\\)s. value argument restricted empty list (list()), parameters model assumed independent, unrestricted model estimated. default value empty list list(). ... Additional arguments passed function adjpin(). recognized arguments hyperparams, fact. argument hyperparams consists list containing hyperparameters ECM algorithm. empty, contains one  following elements: maxeval, tolerance. used method argument set \"ECM\". argument fact binary value determines likelihood functional form used: factorization likelihood function Ersan Ghachem (2022b)  set TRUE, otherwise, original likelihood function Duarte Young (2009) . default value TRUE. arguments Details section. verbose binary variable determines whether detailed information steps estimation AdjPIN model displayed. output produced verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/adjpin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of adjusted PIN model — adjpin","text":"Returns object class estimate.adjpin.","code":""},{"path":"https://www.pinstimation.com/reference/adjpin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimation of adjusted PIN model — adjpin","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored. initialsets neither dataframe, character string set {\"GE\", \"CL\", \"RANDOM\"}, estimation AdjPIN model aborted. default initial parameters (\"GE\") estimation method generated using modified hierarchical agglomerative clustering. information, see initials_adjpin(). argument hyperparams  contains hyperparameters ECM algorithm. either empty contains one two  following elements: maxeval: (integer) stands maximum number iterations ECM  algorithm initial parameter set. missing, maxeval takes default value 100. tolerance (numeric) ECM algorithm stopped (relative) change log-likelihood  smaller tolerance. missing, tolerance takes default value 0.001.","code":""},{"path":"https://www.pinstimation.com/reference/adjpin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimation of adjusted PIN model — adjpin","text":"Cheng T, Lai H (2021). “Improvements estimating probability informed trading models.” Quantitative Finance, 21(5), 771-796. Duarte J, Young L (2009). “PIN priced?” Journal Financial Economics, 91(2), 119--138. ISSN 0304405X. Ersan O, Ghachem M (2022b). “methodological approach computational problems estimation adjusted PIN model.” Available SSRN 4117954. Ghachem M, Ersan O (2022a). “Estimation probability informed trading models via expectation-conditional maximization algorithm.” Available SSRN 4117952. Ghachem M, Ersan O (2022b). “PINstimation: R package estimating models probability informed trading.” Available SSRN 4117946.","code":""},{"path":"https://www.pinstimation.com/reference/adjpin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of adjusted PIN model — adjpin","text":"","code":"# We use 'generatedata_adjpin()' to generate a S4 object of type 'dataset' # with 60 observations.  sim_data <- generatedata_adjpin(days = 60)  # The actual dataset of 60 observations is stored in the slot 'data' of the # S4 object 'sim_data'. Each observation corresponds to a day and contains # the total number of buyer-initiated transactions ('B') and seller- # initiated transactions ('S') on that day.  xdata <- sim_data@data  # ------------------------------------------------------------------------ # # Compare the unrestricted AdjPIN model with various restricted models     # # ------------------------------------------------------------------------ #  # Estimate the unrestricted AdjPIN model using the ECM algorithm (default), # and show the estimation output  estimate.adjpin.0 <- adjpin(xdata, verbose = FALSE)  show(estimate.adjpin.0) #> ---------------------------------- #> AdjPIN estimation completed successfully #> ---------------------------------- #> Likelihood factorization: Ersan and Ghachem (2022b) #> Estimation Algorithm \t: Expectation-Conditional Maximization #> Initial parameter sets\t: Ersan and Ghachem (2022b) #> Model Restrictions \t: Unrestricted model #> ---------------------------------- #> 20 initial set(s) are used in the estimation  #> Type object@initialsets to see the initial parameter sets used #>  #>  AdjPIN model   #>  #> ===========  ============== #> Variables    Estimates      #> ===========  ============== #> alpha        0.583333       #> delta        0.542857       #> theta        0.04           #> theta'       0.028571       #> ----                        #> eps.b        9970.83        #> eps.s        8951.42        #> mu.b         40305.87       #> mu.s         39050.69       #> d.b          21479.11       #> d.s          24395.53       #> ----                        #> Likelihood   (819.784)      #> adjPIN       0.530562       #> PSOS         0.0351         #> ===========  ============== #>  #> ------- #> Running time: 0.449 seconds  # Estimate the restricted AdjPIN model where mub=mus # \\donttest{ estimate.adjpin.1 <- adjpin(xdata, restricted = list(mu = TRUE),                                   verbose = FALSE)  # Estimate the restricted AdjPIN model where eps.b=eps.s  estimate.adjpin.2 <- adjpin(xdata, restricted = list(eps = TRUE),                                   verbose = FALSE)  # Estimate the restricted AdjPIN model where d.b=d.s  estimate.adjpin.3 <- adjpin(xdata, restricted = list(d = TRUE),                                   verbose = FALSE)  # Compare the different values of adjusted PIN  estimates <- list(estimate.adjpin.0, estimate.adjpin.1,                   estimate.adjpin.2, estimate.adjpin.3)  adjpins <- sapply(estimates, function(x) x@adjpin)  psos <- sapply(estimates, function(x) x@psos)  summary <- cbind(adjpins, psos) rownames(summary) <- c(\"unrestricted\", \"same.mu\", \"same.eps\", \"same.d\")  show(round(summary, 5)) #>              adjpins    psos #> unrestricted 0.53056 0.03510 #> same.mu      0.53041 0.03526 #> same.eps     0.52954 0.03495 #> same.d       0.53005 0.03549 # }"},{"path":"https://www.pinstimation.com/reference/aggregate_trades.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregation of high-frequency data — aggregate_trades","title":"Aggregation of high-frequency data — aggregate_trades","text":"Aggregates high-frequency trading data aggregated daily data using different trade classification algorithms.","code":""},{"path":"https://www.pinstimation.com/reference/aggregate_trades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregation of high-frequency data — aggregate_trades","text":"","code":"aggregate_trades(data, algorithm = \"Tick\", timelag = 0, ...,  verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/aggregate_trades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregation of high-frequency data — aggregate_trades","text":"data dataframe 4 variables following order (timestamp, price, bid, ask). algorithm character string refers algorithm used determine trade initiator, buyer seller. takes one four values (\"Tick\", \"Quote\", \"LR\", \"EMO\"). default value \"Tick\". information different algorithms, check details section. timelag number referring time lag milliseconds used calculate lagged midquote, bid ask algorithms \"Quote\", \"EMO\" \"LR\". ... Additional arguments passed function aggregate_trades(). recognized arguments reportdays, is_parallel. arguments ignored. reportdays binary variable determines whether variable day returned. default value FALSE. is_parallel logical variable specifies whether computation performed using parallel sequential processing. default value TRUE. verbose binary variable determines whether detailed information progress trade classification displayed. output produced verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/aggregate_trades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregation of high-frequency data — aggregate_trades","text":"Returns dataframe two (three) variables. reportdaysis set TRUE, returned dataframe three variables {day, b, s}. reportdays set FALSE, returned dataframe two variables {b, s}, , therefore, can directly used estimation PIN MPIN models.","code":""},{"path":"https://www.pinstimation.com/reference/aggregate_trades.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregation of high-frequency data — aggregate_trades","text":"argument algorithm takes one four values: \"Tick\" refers tick algorithm: Trade classified buy (sell) price trade classified () closest different price previous trade. \"Quote\" refers quote algorithm: classifies trade buy (sell) trade price trade classified () mid-point bid ask spread. Trades executed mid-spread classified. \"LR\"  refers LR algorithm Lee Ready (1991) . classifies trade buy (sell) price () mid-spread (quote algorithm),  uses tick algorithm trade price mid-spread. \"EMO\" refers EMO algorithm Ellis et al. (2000) . classifies trades bid (ask) sells (buys) uses tick algorithm classify trades within prevailing bid-ask spread. LR recommend use mid-spread five-seconds earlier ('5-second' rule) mitigating trade misclassifications many 150 NYSE stocks analyze. hand, recent studies Piwowar Wei (2006)  Aktas Kryzanowski (2014) , use 1-second lagged midquotes shown yield lower rates misclassifications. default value set 0 seconds (time-lag). Considering ultra-fast nature today’s financial markets, time-lag unit milliseconds. Shorter 1-second lags can also implemented entering values  100 500.","code":""},{"path":"https://www.pinstimation.com/reference/aggregate_trades.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Aggregation of high-frequency data — aggregate_trades","text":"Aktas OU, Kryzanowski L (2014). “Trade classification accuracy BIST.” Journal International Financial Markets, Institutions Money, 33, 259-282. ISSN 1042-4431. Ellis K, Michaely R, Ohara M (2000). “Accuracy Trade Classification Rules: Evidence Nasdaq.” Journal Financial Quantitative Analysis, 35(4), 529--551. Lee CMC, Ready MJ (1991). “Inferring Trade Direction Intraday Data.” Journal Finance, 46(2), 733--746. ISSN 00221082, 15406261. Piwowar MS, Wei L (2006). “Sensitivity Effective Spread Estimates Trade-Quote Matching Algorithms.” Electronic Markets, 16(2), 112-129.","code":""},{"path":"https://www.pinstimation.com/reference/aggregate_trades.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregation of high-frequency data — aggregate_trades","text":"","code":"# There is a preloaded dataset called 'hfdata' contained in the package. # It is an artificially created high-frequency trading data. The dataset # contains  100 000 trades and five variables 'timestamp', 'price', # 'volume', 'bid', and 'ask'. For more information, type ?hfdata.  xdata <- hfdata xdata$volume <- NULL  # Use the LR algorithm with a timelag of 0 milliseconds  daytrades <- aggregate_trades(xdata, algorithm = \"LR\", verbose = FALSE)  # Since the argument 'reportdays' is set to FALSE by default, then the # output 'daytrades' can be used directly for the estimation of the PIN # model, namely using pin_ea().  estimate <- pin_ea(daytrades, verbose = FALSE)  # Show the estimate  show(estimate) #> ---------------------------------- #> PIN estimation completed successfully #> ---------------------------------- #> Initial parameter sets\t: Ersan and Alici (2016) #> Likelihood factorization: Ersan (2016) #> ---------------------------------- #> 5 initial set(s) are used in the estimation  #> Type object@initialsets to see the initial parameter sets used #>  #>  PIN model   #>  #> ==========  =========== #> Variables   Estimates   #> ==========  =========== #> alpha       0.739132    #> delta       0.274509    #> mu          490.85      #> eps.b       531.6       #> eps.s       554.88      #> ----                    #> Likelihood  (760.765)   #> PIN         0.250332    #> ==========  =========== #>  #> ------- #> Running time: 0.987 seconds"},{"path":"https://www.pinstimation.com/reference/dailytrades.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of quarterly data — dailytrades","title":"Example of quarterly data — dailytrades","text":"example dataset representative quarterly data containing aggregate numbers buyer-initiated seller-initiated trades trading day.","code":""},{"path":"https://www.pinstimation.com/reference/dailytrades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of quarterly data — dailytrades","text":"","code":"dailytrades"},{"path":"https://www.pinstimation.com/reference/dailytrades.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of quarterly data — dailytrades","text":"data frame 60 observations 2 variables: B: total number buyer-initiated trades. S: total number seller-initiated trades.","code":""},{"path":"https://www.pinstimation.com/reference/dailytrades.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example of quarterly data — dailytrades","text":"Artificially created data set.","code":""},{"path":"https://www.pinstimation.com/reference/data.series-class.html","id":null,"dir":"Reference","previous_headings":"","what":"List of dataset objects — data.series-class","title":"List of dataset objects — data.series-class","text":"class data.series blueprint S4 objects store list dataset objects.","code":""},{"path":"https://www.pinstimation.com/reference/data.series-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of dataset objects — data.series-class","text":"","code":"# S4 method for data.series show(object)"},{"path":"https://www.pinstimation.com/reference/data.series-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of dataset objects — data.series-class","text":"object object class data.series","code":""},{"path":"https://www.pinstimation.com/reference/data.series-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"List of dataset objects — data.series-class","text":"series (numeric) returns number dataset objects stored. days (numeric) returns length simulated data days common dataset objects stored. default value 60. model (character) returns character string, either 'MPIN' 'adjPIN'. layers (numeric)  returns number information layers dataset objects stored. takes value 1 adjusted PIN model, .e. model takes value 'adjPIN'. datasets (list) returns list dataset objects stored. restrictions (list) returns binary list contains set parameter restrictions original AdjPIN model estimated AdjPIN model. restrictions imposed equality constraints model parameters. value parameter  restricted empty list (list()), model restrictions, estimated model unrestricted, .e., original AdjPIN model. empty, list contains one multiple following four elements {theta, mu, eps, d}. instance, theta set TRUE, estimated model assumed equality probability liquidity shocks -information, information days, .e., \\(\\theta\\)=\\(\\theta'\\). remaining rate elements {mu, eps, d} equal TRUE, (say  mu=TRUE), estimated model imposed equality concerned parameter buy side, sell side (\\(\\mu\\)b=\\(\\mu\\)s). one element equal TRUE,  restrictions combined. instance,  slot restrictions contains list(theta=TRUE, eps=TRUE, d=TRUE), estimated AdjPIN model three restrictions \\(\\theta\\)=\\(\\theta'\\), \\(\\epsilon\\)b=\\(\\epsilon\\)s, \\(\\Delta\\)b=\\(\\Delta\\)s, .e., estimated just 7 parameters, comparison 10 original unrestricted model. [] slot concerns datasets generated function generatedata_adjpin(). warnings (numeric) returns numbers referring warning errors caused conflict different arguments used call function generatedata_mpin(). runningtime (numeric) returns running time data simulation seconds.","code":""},{"path":"https://www.pinstimation.com/reference/dataset-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data object — dataset-class","title":"Simulated data object — dataset-class","text":"class dataset blueprint S4 objects store result simulation aggregate daily trading data.","code":""},{"path":"https://www.pinstimation.com/reference/dataset-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data object — dataset-class","text":"","code":"# S4 method for dataset show(object)"},{"path":"https://www.pinstimation.com/reference/dataset-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulated data object — dataset-class","text":"object object class dataset","code":""},{"path":"https://www.pinstimation.com/reference/dataset-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated data object — dataset-class","text":"theoreticals parameters used generate daily buys sells. empiricals computed generated daily buys sells. generate data 60 days using \\(\\alpha\\)=0.1, likely outcome obtain 6 days (0.1 x 60) information event days. case, theoretical value \\(\\alpha\\)=0.1 equal empirically estimated value \\(\\alpha\\)=6/60=0.1. number generated information days can, however, different 6; say 5. case, empirical (actual) \\(\\alpha\\) parameter derived generated numbers 5/60=0.0833, differs theoretical \\(\\alpha\\)=0.1. weak law large numbers ensures empirical parameters (empiricals) converge towards theoretical parameters (theoreticals) number days becomes large. detect estimation biases models/methods, comparing estimates empiricals rather theoreticals yield realistic results.","code":""},{"path":"https://www.pinstimation.com/reference/dataset-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Simulated data object — dataset-class","text":"model (character) returns model simulated, either \"MPIN\", \"adjPIN\". days (numeric) returns length generated data days. layers (numeric)  returns number information layers simulated data. takes value 1 adjusted PIN model, .e. model takes value 'adjPIN'. theoreticals (list) returns list theoretical parameters used generate data. empiricals (list) returns list empirical parameters computed generated data. aggregates (numeric) returns aggregation information layers' empirical parameters alongside \\(\\epsilon\\)b \\(\\epsilon\\)s. aggregated parameters calculated follows: \\(\\alpha_{agg} = \\sum \\alpha_j\\)\\(\\alpha*= \\sum \\alpha\\)j \\(\\delta_{agg} = \\sum \\alpha_j \\times \\delta_j\\) \\(\\delta*= \\sum \\alpha\\)j\\(\\delta\\)j, \\(\\mu_{agg} = \\sum \\alpha_j \\times \\mu_j\\)\\(\\mu*= \\sum \\alpha\\)j\\(\\mu\\)j. emp.pin (numeric) returns PIN/MPIN/AdjPIN value derived empirically estimated parameters generated data. data (dataframe) returns dataframe containing generated data. likelihood (numeric) returns value (log-)likelihood function evaluated empirical parameters. warnings (character) stores warning messages events occurred data generation, conflict two arguments. restrictions (list) returns binary list contains set parameter restrictions original AdjPIN model estimated AdjPIN model. restrictions imposed equality constraints model parameters. value parameter  restricted empty list (list()), model restrictions, estimated model unrestricted, .e., original AdjPIN model. empty, list contains one multiple following four elements {theta, mu, eps, d}. instance, theta set TRUE, estimated model assumed equality probability liquidity shocks -information, information days, .e., \\(\\theta\\)=\\(\\theta'\\). remaining rate elements {mu, eps, d} equal TRUE, (say  mu=TRUE), estimated model imposed equality concerned parameter buy side, sell side (\\(\\mu\\)b=\\(\\mu\\)s). one element equal TRUE,  restrictions combined. instance,  slot restrictions contains list(theta=TRUE, eps=TRUE, d=TRUE), estimated AdjPIN model three restrictions \\(\\theta\\)=\\(\\theta'\\), \\(\\epsilon\\)b=\\(\\epsilon\\)s, \\(\\Delta\\)b=\\(\\Delta\\)s, .e., estimated just 7 parameters, comparison 10 original unrestricted model. [] slot concerns datasets generated function generatedata_adjpin().","code":""},{"path":"https://www.pinstimation.com/reference/detectlayers.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer detection in trade-data — detectlayers","title":"Layer detection in trade-data — detectlayers","text":"Detects number information layers present trade-data using algorithms Ersan (2016) , Ersan Ghachem (2022a) , Ghachem Ersan (2022a) .","code":""},{"path":"https://www.pinstimation.com/reference/detectlayers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer detection in trade-data — detectlayers","text":"","code":"detectlayers_e(data, confidence = 0.995, correction = TRUE)  detectlayers_eg(data, confidence = 0.995)  detectlayers_ecm(data, hyperparams = list())"},{"path":"https://www.pinstimation.com/reference/detectlayers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer detection in trade-data — detectlayers","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). confidence number (0.5,1), corresponding range confidence interval used determine whether given cluster compact, therefore can considered information layer. values absolute order imbalances (AOI) within given cluster within confidence interval Skellam distribution level equal 'confidence', centered mean AOI, cluster considered compact, , therefore, information layer. observations outside confidence interval, data clustered . default value 0.995. [] argument functions detectlayers_e(), detectlayers_eg(). correction binary variable determines whether data adjusted prior implementing algorithm Ersan (2016) . default value TRUE. hyperparams list containing hyperparameters ECM algorithm. empty, contains one following elements: maxeval, tolerance, maxinit, maxlayers. elements found Details section. [] argument function detectlayers_ecm().","code":""},{"path":"https://www.pinstimation.com/reference/detectlayers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer detection in trade-data — detectlayers","text":"Returns integer corresponding number layers detected data.","code":""},{"path":"https://www.pinstimation.com/reference/detectlayers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer detection in trade-data — detectlayers","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored. argument hyperparams  contains hyperparameters ECM algorithm. either empty contains one following elements: maxeval: (integer) stands maximum number iterations ECM  initial parameter set. missing, maxeval takes default value 100. tolerance (numeric) ECM algorithm stopped (relative) change log-likelihood smaller tolerance. missing, tolerance takes default value 0.001. maxinit: (integer) maximum number initial parameter sets used ECM estimation per layer. missing, maxinit takes default value 20. maxlayers (integer) upper limit number layers used ECM algorithm. find optimal number layers, ECM algorithm estimate model value number layers 1 maxlayers, picks model lowest Bayes information criterion (BIC). missing, maxlayers takes default value 8.","code":""},{"path":"https://www.pinstimation.com/reference/detectlayers.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Layer detection in trade-data — detectlayers","text":"Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420. Ersan O, Ghachem M (2022a). “Identifying information types probability informed trading (PIN) models: improved algorithm.” Available SSRN 4117956. Ghachem M, Ersan O (2022a). “Estimation probability informed trading models via expectation-conditional maximization algorithm.” Available SSRN 4117952.","code":""},{"path":"https://www.pinstimation.com/reference/detectlayers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer detection in trade-data — detectlayers","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # Detect the number of layers present in the dataset 'dailytrades' using the # different algorithms and display the results  e.layers <- detectlayers_e(xdata) eg.layers <- detectlayers_eg(xdata) em.layers <- detectlayers_ecm(xdata)  show(c(e = e.layers, eg = eg.layers, em = em.layers)) #>  e eg em  #>  3  3  3"},{"path":"https://www.pinstimation.com/reference/estimate.adjpin-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AdjPIN estimation results — estimate.adjpin-class","title":"AdjPIN estimation results — estimate.adjpin-class","text":"class estimate.adjpin blueprint S4 objects store results estimation AdjPIN model using adjpin().","code":""},{"path":"https://www.pinstimation.com/reference/estimate.adjpin-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AdjPIN estimation results — estimate.adjpin-class","text":"","code":"# S4 method for estimate.adjpin show(object)"},{"path":"https://www.pinstimation.com/reference/estimate.adjpin-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AdjPIN estimation results — estimate.adjpin-class","text":"object (estimate.adjpin-class)","code":""},{"path":"https://www.pinstimation.com/reference/estimate.adjpin-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AdjPIN estimation results — estimate.adjpin-class","text":"success (logical) takes value TRUE estimation succeeded, FALSE otherwise. errorMessage (character)  contains error message estimation AdjPIN model failed, empty otherwise. convergent.sets (numeric) returns number initial parameter sets, likelihood maximization converged. method (character) contains reference estimation method: \"ECM\" expectation-conditional maximization algorithm '\"ML\"' standard maximum likelihood estimation. factorization (character) contains reference factorization likelihood function used: \"GE\"factorization Ersan Ghachem (2022b) , \"NONE\" original likelihood function Duarte Young (2009) . restrictions (list) returns binary list contains set parameter restrictions original AdjPIN model estimated AdjPIN model. restrictions imposed equality constraints model parameters. value parameter  restricted empty list (list()), model restrictions, estimated model unrestricted, .e., original AdjPIN model. empty, list contains one multiple following four elements {theta, mu, eps, d}. instance, theta set TRUE, estimated model assumed equality probability liquidity shocks -information, information days, .e., \\(\\theta\\)=\\(\\theta'\\). remaining rate elements {mu, eps, d} equal TRUE, (say  mu=TRUE), estimated model imposed equality concerned parameter buy side, sell side (\\(\\mu\\)b=\\(\\mu\\)s). one element equal TRUE,  restrictions combined. instance,  slot restrictions contains list(theta=TRUE, eps=TRUE, d=TRUE), estimated AdjPIN model three restrictions \\(\\theta\\)=\\(\\theta'\\), \\(\\epsilon\\)b=\\(\\epsilon\\)s, \\(\\Delta\\)b=\\(\\Delta\\)s, .e., estimated just 7 parameters, comparison 10 original unrestricted model. algorithm (character) returns implemented initial parameter set determination algorithm. \"GE\" Ersan Ghachem (2022b) , \"CL\" Cheng Lai (2021) , \"RANDOM\" random initial parameter sets, \"CUSTOM\" custom initial parameter sets. parameters (numeric) returns vector optimal maximum-likelihood estimates ( \\(\\alpha\\), \\(\\delta\\), \\(\\theta\\), \\(\\theta'\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s, \\(\\mu\\)b, \\(\\mu\\)s, \\(\\Delta\\)b, \\(\\Delta\\)s). likelihood (numeric) returns value (factorization) likelihood function, Ersan Ghachem (2022b) , evaluated set optimal parameters. adjpin (numeric) returns value adjusted probability informed trading (Duarte Young 2009) . psos (numeric) returns probability symmetric order flow shock (Duarte Young 2009) . dataset (dataframe) returns dataset buys sells used estimation AdjPIN model. initialsets (dataframe) returns initial parameter sets used estimation AdjPIN model. details (dataframe) returns dataframe containing estimated parameters initial parameter set. hyperparams (list) returns hyperparameters ECM algorithm, maxeval, tolerance. runningtime (numeric) returns running time AdjPIN estimation seconds.","code":""},{"path":"https://www.pinstimation.com/reference/estimate.mpin-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MPIN estimation results — estimate.mpin-class","title":"MPIN estimation results — estimate.mpin-class","text":"class estimate.mpin blueprint S4 objects store results estimation MPIN model, using function mpin_ml().","code":""},{"path":"https://www.pinstimation.com/reference/estimate.mpin-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MPIN estimation results — estimate.mpin-class","text":"","code":"# S4 method for estimate.mpin show(object)"},{"path":"https://www.pinstimation.com/reference/estimate.mpin-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MPIN estimation results — estimate.mpin-class","text":"object object class estimate.mpin","code":""},{"path":"https://www.pinstimation.com/reference/estimate.mpin-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MPIN estimation results — estimate.mpin-class","text":"success (logical) returns value TRUE estimation succeeded, FALSE otherwise. errorMessage (character) returns error message estimation MPIN model failed, empty otherwise. convergent.sets (numeric) returns number initial parameter sets likelihood maximization converged. method (character) returns method estimation used, equal 'Maximum Likelihood Estimation'. layers (numeric) returns number layers detected trading data, provided user. detection (logical) returns reference layer-detection algorithm used (\"E\", \"EG\", \"ECM\"), algorithm used. number layers provided user, detection takes value \"USER\". parameters (list) returns list maximum likelihood estimates (\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s), \\(\\alpha\\), \\(\\delta\\), \\(\\mu\\) numeric vectors length layers. aggregates (numeric) returns aggregation information layers' estimated parameters alongside \\(\\epsilon\\)b, \\(\\epsilon\\)s. aggregated parameters calculated follows: \\(\\alpha_{agg} = \\sum \\alpha_j\\)\\(\\alpha*= \\sum \\alpha\\)j \\(\\delta_{agg} = \\sum \\alpha_j \\times \\delta_j\\)\\(\\delta*= \\sum \\alpha\\)j\\(\\delta\\)j, \\(\\mu_{agg} = \\sum \\alpha_j \\times \\mu_j\\)\\(\\mu*= \\sum \\alpha\\)j\\(\\mu\\)j. likelihood (numeric) returns value (log-)likelihood function evaluated optimal set parameters. mpinJ (numeric) returns values multilayer probability informed trading per layer, calculated using layer-specific estimated parameters. mpin (numeric) returns global value multilayer probability informed trading. sum multilayer probabilities informed trading per layer stored slot mpinJ. mpin.goodbad (list) returns list containing decomposition MPIN good-news, bad-news MPIN components. decomposition suggested PIN measure Brennan et al. (2016) . list four elements: mpinG, mpinB global good-news, bad-news components MPIN, mpinGj, mpinBj two vectors containing  good-news (bad-news) components MPIN computed per layer. dataset (dataframe) returns dataset buys sells used maximum likelihood estimation MPIN model. initialsets (dataframe) returns initial parameter sets used maximum likelihood estimation MPIN model. details (dataframe) returns dataframe containing estimated parameters MLE method initial parameter set. runningtime (numeric) returns running time estimation MPIN model seconds.","code":""},{"path":"https://www.pinstimation.com/reference/estimate.mpin.ecm-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MPIN estimation results (ECM) — estimate.mpin.ecm-class","title":"MPIN estimation results (ECM) — estimate.mpin.ecm-class","text":"class estimate.mpin.ecm blueprint S4 objects store results estimation MPIN model using Expectation-Conditional Maximization method, implemented function mpin_ecm().","code":""},{"path":"https://www.pinstimation.com/reference/estimate.mpin.ecm-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MPIN estimation results (ECM) — estimate.mpin.ecm-class","text":"","code":"# S4 method for estimate.mpin.ecm show(object)  selectModel(object, criterion)  # S4 method for estimate.mpin.ecm selectModel(object, criterion)  getSummary(object)  # S4 method for estimate.mpin.ecm getSummary(object)"},{"path":"https://www.pinstimation.com/reference/estimate.mpin.ecm-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MPIN estimation results (ECM) — estimate.mpin.ecm-class","text":"object object class estimate.mpin.ecm. criterion character string specifying model selection criterion. criterion take one values {\"BIC\", \"AIC\", \"AWE\"}. stand Bayesian Information Criterion, Akaike Information Criterion, Approximate Weight Evidence, respectively.","code":""},{"path":"https://www.pinstimation.com/reference/estimate.mpin.ecm-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"MPIN estimation results (ECM) — estimate.mpin.ecm-class","text":"selectModel,estimate.mpin.ecm-method: returns optimal model among estimated models, .e., model lowest information criterion, provided user. getSummary,estimate.mpin.ecm-method: returns summary estimation MPIN model using ECM algorithm different values argument layers. estimation, number layers, MPIN value, log-likelihood value, well values different information criteria, namely AIC, BIC AWE displayed.","code":""},{"path":"https://www.pinstimation.com/reference/estimate.mpin.ecm-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MPIN estimation results (ECM) — estimate.mpin.ecm-class","text":"success (logical) returns value TRUE estimation succeeded, FALSE otherwise. errorMessage (character) returns error message MPIN estimation failed, empty otherwise. convergent.sets (numeric) returns number initial parameter sets likelihood maximization converged. method (character) returns method estimation, equal 'Expectation-Conditional Maximization Algorithm'. layers (numeric) returns number layers estimated Expectation-Conditional Maximization algorithm, provided user. optimal (logical) returns whether number layers used estimation provided user (optimal=FALSE), determined ECM algorithm (optimal=TRUE). parameters (list) returns list maximum likelihood estimates (\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s), \\(\\alpha\\), \\(\\delta\\), \\(\\mu\\) numeric vectors length layers. aggregates (numeric) returns aggregation information layers' parameters alongside \\(\\epsilon\\)b \\(\\epsilon\\)s. aggregated parameters calculated follows: \\(\\alpha_{agg} = \\sum \\alpha_j\\)\\(\\alpha*= \\sum \\alpha\\)j \\(\\delta_{agg} = \\sum \\alpha_j \\times \\delta_j\\) \\(\\delta*= \\sum \\alpha\\)j\\(\\delta\\)j, \\(\\mu_{agg} = \\sum \\alpha_j \\times \\mu_j\\)\\(\\mu*= \\sum \\alpha\\)j\\(\\mu\\)j. likelihood (numeric) returns value (log-)likelihood function evaluated optimal set parameters. mpinJ (numeric) returns values multilayer probability informed trading per layer, calculated using layer-specific estimated parameters. mpin (numeric) returns global value multilayer probability informed trading. sum multilayer probabilities informed trading per layer stored slot mpinJ. mpin.goodbad (list) returns list containing decomposition MPIN good-news, bad-news MPIN components. decomposition suggested PIN measure Brennan et al. (2016) . list four elements: mpinG, mpinB global good-news, bad-news components MPIN, mpinGj, mpinBj two vectors containing  good-news (bad-news) components MPIN computed per layer. dataset (dataframe) returns dataset buys sells used ECM estimation MPIN model. initialsets (dataframe) returns initial parameter sets used ECM estimation MPIN model. details (dataframe) returns dataframe containing estimated parameters ECM method initial parameter set. models (list) returns list estimate.mpin.ecm objects storing results estimation using function mpin_ecm() different values argument layers. returns NULL argument layers function mpin_ecm() take specific value. AIC (numeric) returns value Akaike Information Criterion (AIC). BIC (numeric) returns value Bayesian Information Criterion (BIC). AWE (numeric) returns value Approximate Weight Evidence. criterion (character) returns model selection criterion used find optimal estimate MPIN model. takes one values 'BIC', 'AIC', 'AWE'; stand Bayesian Information Criterion, Akaike Information Criterion, Approximate Weight Evidence, respectively. hyperparams (list) returns hyperparameters ECM algorithm, minalpha, maxeval, tolerance, maxlayers. Check details section mpin_ecm() know parameters. runningtime (numeric) returns running time estimation seconds.","code":""},{"path":"https://www.pinstimation.com/reference/estimate.pin-class.html","id":null,"dir":"Reference","previous_headings":"","what":"PIN estimation results — estimate.pin-class","title":"PIN estimation results — estimate.pin-class","text":"class estimate.pin blueprint S4 objects store results different PIN functions: pin(), pin_yz(), pin_gwj(), pin_ea().","code":""},{"path":"https://www.pinstimation.com/reference/estimate.pin-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PIN estimation results — estimate.pin-class","text":"","code":"# S4 method for estimate.pin show(object)"},{"path":"https://www.pinstimation.com/reference/estimate.pin-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PIN estimation results — estimate.pin-class","text":"object object class estimate.pin","code":""},{"path":"https://www.pinstimation.com/reference/estimate.pin-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"PIN estimation results — estimate.pin-class","text":"success (logical) takes value TRUE estimation succeeded, FALSE otherwise. errorMessage (character)  contains error message PIN estimation failed, empty otherwise. convergent.sets (numeric) returns number initial parameter sets likelihood maximization converged. algorithm (character) returns algorithm used determine set initial parameter sets maximum likelihood estimation. takes one following values: \"YZ\": Yan Zhang (2012) \"GWJ\": Gan, Wei Johnstone (2015) \"YZ*\": Yan Zhang (2012) modified Ersan Alici (2016) \"EA\": Ersan Alici (2016) \"CUSTOM\": Custom initial parameter sets factorization (character) returns factorization PIN likelihood function used maximum likelihood estimation. takes one following values: \"NONE\": factorization \"EHO\": Easley, Hvidkjaer O'Hara (2010) \"LK\": Lin Ke (2011) \"E\": Ersan (2016) parameters (list) returns list maximum likelihood estimates (\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s) likelihood (numeric) returns value (factorization ) likelihood function evaluated optimal set parameters. pin (numeric) returns value probability informed trading. pin.goodbad (list) returns list containing decomposition PIN good-news, bad-news PIN components. decomposition suggested Brennan et al. (2016) . list two elements: pinG, pinB good-news, bad-news components PIN, respectively. dataset (dataframe) returns dataset buys sells used maximum likelihood estimation PIN model. initialsets (dataframe) returns initial parameter sets used maximum likelihood estimation PIN model. details (dataframe) returns dataframe containing estimated parameters MLE method initial parameter set. runningtime (numeric) returns running time estimation PIN model seconds.","code":""},{"path":"https://www.pinstimation.com/reference/estimate.vpin-class.html","id":null,"dir":"Reference","previous_headings":"","what":"VPIN estimation results — estimate.vpin-class","title":"VPIN estimation results — estimate.vpin-class","text":"class estimate.vpin blueprint S4 objects store results VPIN estimation method using function vpin(). function show() displays description estimate.vpin object: descriptive statistics VPIN variable, set relevant parameters, running time.","code":""},{"path":"https://www.pinstimation.com/reference/estimate.vpin-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VPIN estimation results — estimate.vpin-class","text":"","code":"# S4 method for estimate.vpin show(object)"},{"path":"https://www.pinstimation.com/reference/estimate.vpin-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"VPIN estimation results — estimate.vpin-class","text":"object object class estimate.vpin","code":""},{"path":"https://www.pinstimation.com/reference/estimate.vpin-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"VPIN estimation results — estimate.vpin-class","text":"success (logical) returns value TRUE estimation succeeded, FALSE otherwise. errorMessage (character) returns error message VPIN estimation failed, empty otherwise. parameters (numeric) returns numeric vector estimation parameters (tbSize, buckets, samplength, VBS, #days), tbSize size timebars (seconds); buckets number buckets per average volume day; VBS  Volume Bucket Size (daily average volume/number buckets buckets); samplength length window used estimate VPIN;  #days number days dataset. bucketdata (dataframe) returns dataframe containing detailed information buckets. Following output Abad Yague (2012) , report bucket identifier (bucket), aggregate buy volume (agg.bVol), aggregate sell volume (agg.sVol), absolute order imbalance (AOI=|agg.bVol-agg.sVol|), start time (starttime), end time (endtime), duration seconds (duration) well VPIN vector. vpin (numeric) returns vector volume-synchronized probabilities informed trading. dailyvpin (dataframe) returns daily VPIN values. Two variants provided given day: dvpin corresponds unweighted average vpin values, dvpin.weighted corresponds average vpin values weighted bucket duration. runningtime (numeric) returns running time VPIN estimation seconds.","code":""},{"path":"https://www.pinstimation.com/reference/factorizations.html","id":null,"dir":"Reference","previous_headings":"","what":"Factorizations of the different PIN likelihood functions — factorizations","title":"Factorizations of the different PIN likelihood functions — factorizations","text":"PIN likelihood function derived original PIN model developed Easley Ohara (1992)  Easley et al. (1996) . maximization likelihood function leads computational problems, particular, floating point errors. remedy issue, several log-transformations factorizations different PIN likelihood functions suggested. main factorizations literature : fact_pin_eho(): factorization Easley et al. (2010) fact_pin_lk(): factorization Lin Ke (2011) fact_pin_e(): factorization Ersan (2016) factorization likelihood function multilayer PIN model, developed Ersan (2016) . fact_mpin(): factorization Ersan (2016) factorization likelihood function adjusted PIN model (Duarte Young 2009) , derived, presented Ersan Ghachem (2022b) . fact_adjpin(): factorization Ersan Ghachem (2022b)","code":""},{"path":"https://www.pinstimation.com/reference/factorizations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factorizations of the different PIN likelihood functions — factorizations","text":"","code":"fact_pin_eho(data, parameters = NULL)  fact_pin_lk(data, parameters = NULL)  fact_pin_e(data, parameters = NULL)  fact_mpin(data, parameters = NULL)  fact_adjpin(data, parameters = NULL)"},{"path":"https://www.pinstimation.com/reference/factorizations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factorizations of the different PIN likelihood functions — factorizations","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). parameters case PIN likelihood factorization, ordered numeric vector (\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s). case MPIN likelihood factorization, ordered numeric vector (\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s), \\(\\alpha\\), \\(\\delta\\), \\(\\mu\\) numeric vectors size J, J number information layers data. case AdjPIN likelihood factorization, ordered numeric vector (\\(\\alpha\\), \\(\\delta\\), \\(\\theta\\), \\(\\theta'\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s, \\(\\mu\\)b, \\(\\mu\\)s, \\(\\Delta\\)b, \\(\\Delta\\)s). default value NULL.","code":""},{"path":"https://www.pinstimation.com/reference/factorizations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factorizations of the different PIN likelihood functions — factorizations","text":"argument parameters omitted, returns function object can used optimization functions optim(), neldermead(). argument parameters provided, returns numeric value log-likelihood function evaluated dataset data parameters parameters, parameters numeric vector following order (\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s) factorizations PIN likelihood function, (\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s) factorization MPIN likelihood function, (\\(\\alpha\\), \\(\\delta\\), \\(\\theta\\), \\(\\theta'\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s ,\\(\\mu\\)b, \\(\\mu\\)s, \\(\\Delta\\)b, \\(\\Delta\\)s) factorization AdjPIN likelihood function.","code":""},{"path":"https://www.pinstimation.com/reference/factorizations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factorizations of the different PIN likelihood functions — factorizations","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored. tests, line Lin Ke (2011) , Ersan Alici (2016) , demonstrate similar results fact_pin_lk(), fact_pin_e(), substantially better estimates fact_pin_eho().","code":""},{"path":"https://www.pinstimation.com/reference/factorizations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Factorizations of the different PIN likelihood functions — factorizations","text":"Duarte J, Young L (2009). “PIN priced?” Journal Financial Economics, 91(2), 119--138. ISSN 0304405X. Easley D, Hvidkjaer S, Ohara M (2010). “Factoring information returns.” Journal Financial Quantitative Analysis, 45(2), 293--309. ISSN 00221090. Easley D, Kiefer NM, Ohara M, Paperman JB (1996). “Liquidity, information, infrequently traded stocks.” Journal Finance, 51(4), 1405--1436. ISSN 00221082. Easley D, Ohara M (1992). “Time Process Security Price Adjustment.” Journal Finance, 47(2), 577--605. ISSN 15406261. Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420. Ersan O, Alici (2016). “unbiased computation methodology estimating probability informed trading (PIN).” Journal International Financial Markets, Institutions Money, 43, 74--94. ISSN 10424431. Ersan O, Ghachem M (2022b). “methodological approach computational problems estimation adjusted PIN model.” Available SSRN 4117954. Lin H, Ke W (2011). “computing bias estimating probability informed trading.” Journal Financial Markets, 14(4), 625-640. ISSN 1386-4181.","code":""},{"path":"https://www.pinstimation.com/reference/factorizations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factorizations of the different PIN likelihood functions — factorizations","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # ------------------------------------------------------------------------ # # Using fact_pin_eho(), fact_pin_lk(), fact_pin_e() to find the likelihood # # value as factorized by Easley(2010), Lin & Ke (2011), and Ersan(2016).   # # ------------------------------------------------------------------------ #  # Choose a given parameter set to evaluate the likelihood function at a # givenpoint  = (alpha, delta, mu, eps.b, eps.s)  givenpoint <- c(0.4, 0.1, 800, 300, 200)  # Use the ouput of fact_pin_e() with the optimization function optim() to # find optimal estimates of the PIN model.  model <- suppressWarnings(optim(givenpoint, fact_pin_e(xdata)))  # Collect the model estimates from the variable model and display them.  varnames <- c(\"alpha\", \"delta\", \"mu\", \"eps.b\", \"eps.s\") estimates <- setNames(model$par, varnames) show(estimates) #>        alpha        delta           mu        eps.b        eps.s  #>   0.88135868   0.06522792 870.07467354 455.66252617 378.39347697   # Find the value of the log-likelihood function at givenpoint  lklValue <- fact_pin_lk(xdata, givenpoint)  show(lklValue) #> [1] -9104.868  # ------------------------------------------------------------------------ # # Using fact_mpin() to find the value of the MPIN likelihood function as   # # factorized by Ersan (2016).                                              # # ------------------------------------------------------------------------ #  # Choose a given parameter set to evaluate the likelihood function at a # givenpoint  = (alpha(), delta(), mu(), eps.b, eps.s) where alpha(), delta() # and mu() are vectors of size 2.  givenpoint <- c(0.4, 0.5, 0.1, 0.6, 600, 1000, 300, 200)  # Use the output of fact_mpin() with the optimization function optim() to # find optimal estimates of the PIN model.  model <- suppressWarnings(optim(givenpoint, fact_mpin(xdata)))  # Collect the model estimates from the variable model and display them.  varnames <- c(paste(\"alpha\", 1:2, sep = \"\"), paste(\"delta\", 1:2, sep = \"\"),               paste(\"mu\", 1:2, sep = \"\"), \"eb\", \"es\") estimates <- setNames(model$par, varnames) show(estimates) #>       alpha1       alpha2       delta1       delta2          mu1          mu2  #> 6.157480e-01 3.553656e-01 9.057862e-01 6.349368e-02 6.018977e+02 1.032878e+03  #>           eb           es  #> 4.038852e+02 2.557359e+02   # Find the value of the MPIN likelihood function at givenpoint  lklValue <- fact_mpin(xdata, givenpoint)  show(lklValue) #> [1] -5791.781  # ------------------------------------------------------------------------ # # Using fact_adjpin() to find the value of the DY likelihood function as   # # factorized by Ersan and Ghachem (2022b).                                 # # ------------------------------------------------------------------------ #  # Choose a given parameter set to evaluate the likelihood function # at a the initial parameter set givenpoint = (alpha, delta, # theta, theta',eps.b, eps.s, muB, muS, db, ds)  givenpoint <- c(0.4, 0.1, 0.3, 0.7, 500, 600, 800, 1000, 300, 200)  # Use the output of fact_adjpin() with the optimization function # neldermead() to find optimal estimates of the AdjPIN model.  low <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0) up <- c(1, 1, 1, 1, Inf, Inf, Inf, Inf, Inf, Inf) model <- nloptr::neldermead( givenpoint, fact_adjpin(xdata), lower = low, upper = up)  # Collect the model estimates from the variable model and display them.  varnames <- c(\"alpha\", \"delta\", \"theta\", \"thetap\", \"eps.b\", \"eps.s\",               \"muB\", \"muS\", \"db\", \"ds\") estimates <- setNames(model$par, varnames) show(estimates) #>        alpha        delta        theta       thetap        eps.b        eps.s  #> 5.675257e-01 1.941894e-01 5.363950e-01 1.232052e-03 3.355085e+02 3.336092e+02  #>          muB          muS           db           ds  #> 1.506971e+03 8.750166e+02 6.445527e+02 5.761288e+00   # Find the value of the log-likelihood function at givenpoint  adjlklValue <- fact_adjpin(xdata, givenpoint) show(adjlklValue) #> [1] -8711.678"},{"path":"https://www.pinstimation.com/reference/generatedata_adjpin.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of AdjPIN model data. — generatedata_adjpin","title":"Simulation of AdjPIN model data. — generatedata_adjpin","text":"Generates dataset object data.series object (list dataset objects) storing simulation parameters well aggregate daily buys sells simulated following assumption AdjPIN model Duarte Young (2009) .","code":""},{"path":"https://www.pinstimation.com/reference/generatedata_adjpin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of AdjPIN model data. — generatedata_adjpin","text":"","code":"generatedata_adjpin(series=1, days = 60, parameters = NULL, ranges = list(), restricted = list(), verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/generatedata_adjpin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of AdjPIN model data. — generatedata_adjpin","text":"series number datasets generate. days number trading days, aggregated buys sells generated. default value 60. parameters vector model parameters size 10 following form {\\(\\alpha\\), \\(\\delta\\), \\(\\theta\\), \\(\\theta'\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s, \\(\\mu\\)b, \\(\\mu\\)s, \\(\\Delta\\)b, \\(\\Delta\\)s}. ranges list ranges different simulation parameters named elements alpha \\((\\alpha)\\), delta \\((\\delta)\\), theta \\((\\theta)\\), thetap \\((\\theta')\\), eps.b (\\(\\epsilon\\)b), eps.s (\\(\\epsilon\\)s), mu.b (\\(\\mu\\)b), mu.s (\\(\\mu\\)s), d.b (\\(\\Delta\\)b), d.s (\\(\\Delta\\)s). value element vector two numbers: first one minimal value min_v second one maximal value max_v. element corresponding given parameter missing, default range parameter used, otherwise, simulation parameters uniformly drawn interval (min_v, max_v). default value list(). restricted binary list allows estimating restricted AdjPIN models specifying model parameters assumed equal. contains one multiple following four elements {theta, mu, eps, d}. instance, theta set TRUE, probability liquidity shock -information days, information days assumed (\\(\\theta\\)=\\(\\theta'\\)). remaining rate elements {mu, eps, d} set TRUE, (say  mu=TRUE), rate assumed buy side, sell side (\\(\\mu\\)b=\\(\\mu\\)s). one element set TRUE, restrictions combined. instance, argument restricted set list(theta=TRUE, eps=TRUE, d=TRUE), restricted AdjPIN model estimated, \\(\\theta\\)=\\(\\theta'\\), \\(\\epsilon\\)b=\\(\\epsilon\\)s, \\(\\Delta\\)b=\\(\\Delta\\)s. value argument restricted empty list (list()), parameters model assumed independent, unrestricted model estimated. default value empty list list(). verbose binary variable determines whether detailed information progress data generation displayed. output produced verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/generatedata_adjpin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of AdjPIN model data. — generatedata_adjpin","text":"Returns object class dataset series=1, object class data.series series>1.","code":""},{"path":"https://www.pinstimation.com/reference/generatedata_adjpin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation of AdjPIN model data. — generatedata_adjpin","text":"argument parameters missing, parameters generated using ranges specified argument ranges. argument ranges set list(), default ranges used. Using default ranges, simulation parameters obtained using following procedure: \\(\\alpha\\), \\(\\delta\\): (alpha, delta) uniformly distributed (0, 1). \\(\\theta\\), \\(\\theta'\\): (theta,thetap) uniformly distributed (0, 1). \\(\\epsilon\\)b: (eps.b) integer uniformly drawn interval (100, 10000) step 50. \\(\\epsilon\\)s: (eps.s) integer uniformly drawn ((4/5)\\(\\epsilon\\)b, (6/5)\\(\\epsilon\\)b) step 50. \\(\\Delta\\)b: (d.b) integer uniformly drawn ((1/2)\\(\\epsilon\\)b, 2\\(\\epsilon\\)b). \\(\\Delta\\)s: (d.s) integer uniformly drawn ((4/5)\\(\\Delta\\)b, (6/5)\\(\\Delta\\)b). \\(\\mu\\)b: (mu.b) uniformly distributed interval ((1/2) max(\\(\\epsilon\\)b, \\(\\epsilon\\)s), 5 max(\\(\\epsilon\\)b, \\(\\epsilon\\)s)). \\(\\mu\\)s: (mu.s) uniformly distributed interval ((4/5)\\(\\mu\\)b, (6/5)\\(\\mu\\)b).. Based simulation parameters parameters, daily buys sells generated assumption buys sells follow Poisson distributions mean parameters: (\\(\\epsilon\\)b, \\(\\epsilon\\)s) day information liquidity shock; (\\(\\epsilon\\)b+\\(\\Delta\\)b, \\(\\epsilon\\)s+\\(\\Delta\\)s) day information liquidity shock; (\\(\\epsilon\\)b+\\(\\mu\\)b, \\(\\epsilon\\)s) day good information liquidity shock; (\\(\\epsilon\\)b+\\(\\mu\\)b+\\(\\Delta\\)b, \\(\\epsilon\\)s+\\(\\Delta\\)s) day good information liquidity shock; (\\(\\epsilon\\)b, \\(\\epsilon\\)s+\\(\\mu\\)s) day bad information liquidity shock; (\\(\\epsilon\\)b+\\(\\Delta\\)s, \\(\\epsilon\\)s+\\(\\mu\\)s+\\(\\Delta\\)s) day bad information liquidity shock;","code":""},{"path":"https://www.pinstimation.com/reference/generatedata_adjpin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulation of AdjPIN model data. — generatedata_adjpin","text":"Duarte J, Young L (2009). “PIN priced?” Journal Financial Economics, 91(2), 119--138. ISSN 0304405X.","code":""},{"path":"https://www.pinstimation.com/reference/generatedata_adjpin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of AdjPIN model data. — generatedata_adjpin","text":"","code":"# ------------------------------------------------------------------------ # # Generate data following the AdjPIN model using generatedata_adjpin()     # # ------------------------------------------------------------------------ #  # With no arguments, the function generates one dataset object spanning # 60 days, and where the parameters are chosen as described in the section # 'Details'.  sdata <- generatedata_adjpin()  # Alternatively, simulation parameters can be provided. Recall the order of # parameters (alpha, delta, theta, theta', eps.b, eps.s, mub, mus, db, ds).  givenpoint <- c(0.4, 0.1, 0.5, 0.6, 800, 1000, 2300, 4000, 500, 500) sdata <- generatedata_adjpin(parameters = givenpoint)  # Data can be generated following restricted AdjPIN models, for example, with # restrictions 'eps.b = eps.s', and 'mu.b = mu.s'.  sdata <- generatedata_adjpin(restricted = list(eps = TRUE, mu = TRUE))  # Data can be generated using provided ranges of simulation parameters as fed # to the function using the argument 'ranges', where thetap corresponds to # theta'.  sdata <- generatedata_adjpin(ranges = list(   alpha = c(0.1, 0.15), delta = c(0.2, 0.2),   theta = c(0.2, 0.6), thetap = c(0.2, 0.4) ))  # The value of a given simulation parameter can be set to a specific value by # setting the range of the desired parameter takes a unique value, instead of # a pair of values.  sdata <- generatedata_adjpin(ranges = list(   alpha = 0.4, delta = c(0.2, 0.7),   eps.b = c(100, 7000), mu.b = 8000 ))  # Display the details of the generated simulation data  show(sdata) #> ---------------------------------- #> Data series successfully generated #> ---------------------------------- #> Simulation model \t: AdjPIN model #> Model Restrictions \t: Unrestricted model #> Number of trading days\t: 60 days #> ---------------------------------- #> Type object@data to get the simulated data #>  #>  Data simulation   #>  #> ===========  ==============  ============ #> Variables    Theoretical.    Empirical.   #> ===========  ==============  ============ #> alpha        0.4             0.516667     #> delta        0.500118        0.483871     #> theta        0.353644        0.413793     #> theta'       0.756137        0.709677     #> ----                                      #> eps.b        4921            4921.79      #> eps.s        5407            5400         #> mu.b         8000            8076.37      #> mu.s         7960            7968.4       #> d.b          1341            1325.68      #> d.s          1412            1436.24      #> ----                                      #> Likelihood                   (816.877)    #> adjPIN       0.214           0.259        #> PSOS         0.095           0.098        #> ===========  ==============  ============ #>  #> ------- #> Running time: 0.024 seconds  # ------------------------------------------------------------------------ # # Use generatedata_adjpin() to check the accuracy of adjpin()              # # ------------------------------------------------------------------------ #  model <- adjpin(sdata@data, verbose = FALSE)  summary <- cbind(   c(sdata@emp.pin['adjpin'], model@adjpin, abs(model@adjpin -   sdata@emp.pin['adjpin'])),   c(sdata@emp.pin['psos'], model@psos, abs(model@psos -   sdata@emp.pin['psos'])) ) colnames(summary) <- c('adjpin', 'psos') rownames(summary) <- c('Data', 'Model', 'Difference')  show(knitr::kable(summary, 'simple')) #>  #>  #>                  adjpin        psos #> -----------  ----------  ---------- #> Data          0.2585842   0.0976186 #> Model         0.2579054   0.0981829 #> Difference    0.0006789   0.0005643"},{"path":"https://www.pinstimation.com/reference/generatedata_mpin.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of MPIN model data — generatedata_mpin","title":"Simulation of MPIN model data — generatedata_mpin","text":"Generates dataset object data.series object (list dataset objects) storing simulation parameters well aggregate daily buys sells simulated following assumption MPIN model (Ersan 2016) .","code":""},{"path":"https://www.pinstimation.com/reference/generatedata_mpin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of MPIN model data — generatedata_mpin","text":"","code":"generatedata_mpin(series = 1, days = 60, layers = NULL,                          parameters = NULL, ranges = list(), ...,                          verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/generatedata_mpin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of MPIN model data — generatedata_mpin","text":"series number datasets generate. days number trading days aggregated buys sells generated. Default value 60. layers number information layers included simulated data. Default value NULL. layers omitted set NULL, number layers uniformly selected set {1, ..., maxlayers}. parameters vector model parameters size 3J+2 J number information layers following form {\\(\\alpha\\)1, ...,\\(\\alpha\\)J, \\(\\delta\\)1,..., \\(\\delta\\)J, \\(\\mu\\)1,..., \\(\\mu\\)J, \\(\\epsilon\\)b, \\(\\epsilon\\)s}. ranges list ranges different simulation parameters named elements \\(\\alpha\\), \\(\\delta\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s, \\(\\mu\\). value element vector two numbers: first one minimal value min_v second one maximal value max_v. element corresponding given parameter missing, default range parameter used. argument ranges empty list parameters NULL, default ranges parameters used. simulation parameters uniformly drawn interval (min_v, max_v) specified parameters. default value list(). ... Additional arguments passed function generatedata_mpin(). recognized arguments confidence, maxlayers, eps_ratio, mu_ratio. confidence (numeric) denotes range confidence interval associated layer observations within layer j lie theoretical confidence interval Skellam distribution centered mean order imbalance, level 'confidence'. default value 0.99. maxlayers (integer) denotes upper limit number layers generated datasets. argument layers missing, layers simulated datasets uniformly drawn {1,..., maxlayers}. missing, maxlayers takes default value 5. eps_ratio (numeric) specifies admissible range value ratio \\(\\epsilon\\)s/\\(\\epsilon\\)b, can two-value vector just single value. eps_ratio vector two values: first one minimal value second one maximal value; function tries generate \\(\\epsilon\\)s \\(\\epsilon\\)b satisfying ratios \\(\\epsilon\\)s/\\(\\epsilon\\)b lies within interval eps_ratio. eps_ratio single number, function tries generate \\(\\epsilon\\)s \\(\\epsilon\\)b satisfying \\(\\epsilon\\)s = \\(\\epsilon\\)b x eps_ratio. range conflicts arguments ranges, warning displayed. default value c(0.75, 1.25). mu_ratio (numeric) minimal value ratio two consecutive values vector mu. mu_ratio = 1.25 e.g., \\(\\mu\\)j+1 larger 1.25* \\(\\mu\\)j j = 1, .., J. mu_ratio conflicts arguments ranges confidence, warning displayed. default value NULL. verbose (logical) binary variable determines whether detailed information progress data generation displayed. output produced verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/generatedata_mpin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of MPIN model data — generatedata_mpin","text":"Returns object class dataset series=1, object class data.series series>1.","code":""},{"path":"https://www.pinstimation.com/reference/generatedata_mpin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation of MPIN model data — generatedata_mpin","text":"information layer refers given type information event existing data. PIN model assumes single type information events characterized three parameters \\(\\alpha\\), \\(\\delta\\), \\(\\mu\\). MPIN model relaxes assumption, relinquishing restriction number information event types. layers = 1, generated data fit assumptions PIN model. argument parameters missing, simulation parameters generated using ranges specified argument ranges. argument ranges list(), default ranges used. Using default ranges, simulation parameters obtained using following procedure: \\(\\alpha()\\): vector length layers, \\(\\alpha\\)j uniformly distributed (0, 1) subject condition: \\(\\sum \\alpha\\)j\\(< 1\\). \\(\\delta()\\): vector length layers, \\(\\delta\\)j uniformly distributed (0, 1). \\(\\mu()\\): vector length layers, \\(\\mu\\)j uniformly distributed interval (0.5 max(\\(\\epsilon\\)b, \\(\\epsilon\\)s), 5 max(\\(\\epsilon\\)b, \\(\\epsilon\\)s)). \\(\\mu\\):s sorted excess trading increases information layers, subject condition ratio two consecutive \\(\\mu\\)'s least 1.25. \\(\\epsilon\\)b: integer drawn uniformly interval (100, 10000) step 50. \\(\\epsilon\\)s: integer uniformly drawn ((3/4)\\(\\epsilon\\)b, (5/4)\\(\\epsilon\\)b) step 50. Based simulation parameters parameters, daily buys sells generated assumption buys sells follow Poisson distributions mean parameters (\\(\\epsilon\\)b, \\(\\epsilon\\)s) days information; mean parameters (\\(\\epsilon\\)b + \\(\\mu\\)j, \\(\\epsilon\\)s) days good information layer \\(j\\) (\\(\\epsilon\\)b, \\(\\epsilon\\)s + \\(\\mu\\)j) days bad information layer \\(j\\). Considerations ranges simulation parameters: generatedata_mpin() function enables user simulate data series set theoretical parameters, strongly recommend use parameter sets satisfying conditions line nature empirical data theoretical models used within package. parameter values assigned user, function, default, simulates data series line criteria. Consideration 1: \\(\\mu\\)'s value separable \\(\\epsilon\\)b \\(\\epsilon\\)s values, well \\(\\mu\\) values. Otherwise, PIN MPIN estimation yield expected results. [x] Sharp example.1: \\(\\epsilon\\)b\\( = 1000\\); \\(\\mu = 1\\). case, information layer can captured healthy way use models relies Poisson distributions. [x] Sharp example.2: \\(\\epsilon\\)s\\( = 1000\\), \\(\\mu\\)1\\( = 1000\\), \\(\\mu\\)2\\( = 1001\\). Similarly, distinction can made two simulated layers informed trading. real life, entails one type information also estimate MPIN model. However, simulated data properties, 2 layers lead user make wrong evaluation model performance. Consideration 2: \\(\\epsilon\\)b \\(\\epsilon\\)s relatively close . far , indicate substantial asymmetry buyer seller initiated trades, strong signal informed trading. theoretical evidence indicate uninformed trading buy sell sides deviate much real life. Besides, numerous papers work PIN model provide close uninformed intensities. parameter values assigned user, function generates data condition sell side uninformed trading range (4/5):=80% (6/5):=120% buy side uninformed rate. [x] Sharp example.3: \\(\\epsilon\\)b\\( = 1000\\), \\(\\epsilon\\)s\\( = 10000\\). case, PIN MPIN models tend consider trading sell side informed (actual case). , estimation results deviate much simulation parameters good news misleading factor model evaluation. See example Cheng Lai (2021)  misinterpretation comparative performances. paper's findings highly rely simulations extremely different \\(\\epsilon\\)b \\(\\epsilon\\)s values (813-8124 pair 8126-812).","code":""},{"path":"https://www.pinstimation.com/reference/generatedata_mpin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulation of MPIN model data — generatedata_mpin","text":"Cheng T, Lai H (2021). “Improvements estimating probability informed trading models.” Quantitative Finance, 21(5), 771-796. Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420.","code":""},{"path":"https://www.pinstimation.com/reference/generatedata_mpin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of MPIN model data — generatedata_mpin","text":"","code":"# ------------------------------------------------------------------------ # # There are different scenarios of using the function generatedata_mpin()  # # ------------------------------------------------------------------------ #  # With no arguments, the function generates one dataset object spanning # 60 days, containing a number of information layers uniformly selected # from `{1, 2, 3, 4, 5}`, and where the parameters are chosen as # described in the details.  sdata <- generatedata_mpin()  # The number of layers can be deduced from the simulation parameters, if # fed directly to the function generatedata_mpin() through the argument # 'parameters'. In this case, the output is a dataset object with one # information layer.  givenpoint <- c(0.4, 0.1, 800, 300, 200) sdata <- generatedata_mpin(parameters = givenpoint)  # The number of layers can alternatively be set directly through the # argument 'layers'.  sdata <- generatedata_mpin(layers = 2)  # The simulation parameters can be randomly drawn from their corresponding # ranges fed through the argument 'ranges'.  sdata <- generatedata_mpin(ranges = list(alpha = c(0.1, 0.7),                                         delta = c(0.2, 0.7),                                         mu = c(3000, 5000)))  # The value of a given simulation parameter can be set to a specific value by # setting the range of the desired parameter takes a unique value, instead of # a pair of values.  sdata <- generatedata_mpin(ranges = list(alpha = 0.4, delta = c(0.2, 0.7),                                         eps.b = c(100, 7000),                                         mu = c(8000, 12000))) #>  [Warning] The maximum layers possible given that alpha >= 0.4 is: 2. #>   # If both arguments 'parameters', and 'layers' are simultaneously provided, # and the number of layers detected from the length of the argument # 'parameters' is different from the argument 'layers', the former is used # and a warning is displayed.  sim.params <- c(0.4, 0.2, 0.9, 0.1, 400, 700, 300, 200) sdata <- generatedata_mpin(days = 120, layers = 3, parameters = sim.params) #>  [Warning] #> The number of layers derived from 'parameters' is not compatible with 'layers'. #> The argument 'layers' will be ignored #>   # Display the details of the generated data  show(sdata) #> ---------------------------------- #> Data series successfully generated #> ---------------------------------- #> Simulation model \t: MPIN model #> Number of layers\t: 2 layer(s) #> Number of trading days\t: 120 days #> ---------------------------------- #> Type object@data to get the simulated data #>  #>  Data simulation   #>  #> ===========  ==============  ==================  ============= #> Variables    Theoretical.    Empirical.          Aggregates.   #> ===========  ==============  ==================  ============= #> alpha        0.4, 0.2        0.425, 0.200        0.625         #> delta        0.9, 0.1        0.901961, 0.166667  0.666667      #> mu           400, 700        400.17, 717.80      501.81        #> eps.b        300             299.59              299.59        #> eps.s        200             198.77              198.77        #> ----                                                           #> Likelihood   -               (1187.365)          (1187.365)    #> mpin         -               0.386249            0.386249      #> ===========  ==============  ==================  ============= #>  #> ------- #> Running time: 0.009 seconds # \\donttest{ # ------------------------------------------------------------------------ # # Use generatedata_mpin() to compare the accuracy of estimation methods    # # ------------------------------------------------------------------------ #  # The example below illustrates the use of the function 'generatedata_mpin()' # to compare the accuracy of the functions 'mpin_ml()', and 'mpin_ecm()'.  # The example will depend on three variables: # n: the number of datasets used # l: the number of layers in each simulated datasets # xc : the number of extra clusters used in initials_mpin  # For consideration of speed, we will set n = 2, l = 2, and xc = 2 # These numbers can change to fit the user's preferences n <- l <- xc <- 2  # We start by generating n datasets simulated according to the # assumptions of the MPIN model.  dataseries <- generatedata_mpin(series = n, layers = l, verbose = FALSE)  # Store the estimates in two different lists: 'mllist', and 'ecmlist'  mllist <- lapply(dataseries@datasets, function(x)   mpin_ml(x@data, xtraclusters = xc, layers = l, verbose = FALSE))  ecmlist <- lapply(dataseries@datasets, function(x)   mpin_ecm(x@data, xtraclusters = xc, layers = l, verbose = FALSE))  # For each estimate, we calculate the absolute difference between the # estimated mpin, and empirical mpin computed using dataset parameters. # The absolute differences are stored in 'mldmpin' ('ecmdpin') for the # ML (ECM) method,  mldpin <- sapply(1:n,  function(x) abs(mllist[[x]]@mpin - dataseries@datasets[[x]]@emp.pin))  ecmdpin <- sapply(1:n,  function(x) abs(ecmlist[[x]]@mpin - dataseries@datasets[[x]]@emp.pin))  # Similarly, we obtain vectors of running times for both estimation methods. # They are stored in 'mltime' ('ecmtime') for the ML (ECM) method.  mltime <- sapply(mllist, function(x) x@runningtime) ecmtime <- sapply(ecmlist, function(x) x@runningtime)  # Finally, we calculate the average absolute deviation from empirical PIN # as well as the average running time for both methods. This allows us to # compare them in terms of accuracy, and speed.  accuracy <- c(mean(mldpin), mean(ecmdpin)) timing <- c(mean(mltime), mean(ecmtime)) comparison <- as.data.frame(rbind(accuracy, timing)) colnames(comparison) <- c(\"ML\", \"ECM\") rownames(comparison) <- c(\"Accuracy\", \"Timing\")  show(round(comparison, 6)) #>                ML      ECM #> Accuracy 0.000041 0.000049 #> Timing   6.812500 0.104000 # }"},{"path":"https://www.pinstimation.com/reference/get_posteriors.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior probabilities for PIN and MPIN estimates — get_posteriors","title":"Posterior probabilities for PIN and MPIN estimates — get_posteriors","text":"Computes, day sample, posterior probability day -information day, good-information day bad-information day, respectively (Easley Ohara (1992) , Easley et al. (1996) , Ersan (2016) ).","code":""},{"path":"https://www.pinstimation.com/reference/get_posteriors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior probabilities for PIN and MPIN estimates — get_posteriors","text":"","code":"get_posteriors(object)"},{"path":"https://www.pinstimation.com/reference/get_posteriors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior probabilities for PIN and MPIN estimates — get_posteriors","text":"object (S4 object) object type estimate.pin, estimate.mpin, estimate.mpin.ecm.","code":""},{"path":"https://www.pinstimation.com/reference/get_posteriors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior probabilities for PIN and MPIN estimates — get_posteriors","text":"argument object type estimate.pin, returns dataframe three variables post.N, post.G post.B containing row posterior probability given day -information day (N), good-information day (G), bad-information day (B) respectively. argument object type estimate.mpin estimate.mpin.ecm, J layers, returns dataframe 2*J+1 variables Post.N, Post.G[j] Post.B[j] layer j containing row posterior probability given day -information day, good-information day layer j bad-information day layer j, layer j respectively. argument object type, error returned.","code":""},{"path":"https://www.pinstimation.com/reference/get_posteriors.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Posterior probabilities for PIN and MPIN estimates — get_posteriors","text":"Easley D, Kiefer NM, Ohara M, Paperman JB (1996). “Liquidity, information, infrequently traded stocks.” Journal Finance, 51(4), 1405--1436. ISSN 00221082. Easley D, Ohara M (1992). “Time Process Security Price Adjustment.” Journal Finance, 47(2), 577--605. ISSN 15406261. Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420.","code":""},{"path":"https://www.pinstimation.com/reference/get_posteriors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior probabilities for PIN and MPIN estimates — get_posteriors","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # ------------------------------------------------------------------------ # # Posterior probabilities for PIN estimates                                # # ------------------------------------------------------------------------ #  # Estimate PIN using the Ersan and Alici (2016) algorithm and the # factorization Lin and Ke(2011).  estimate <- pin_ea(xdata, \"LK\", verbose = FALSE)  # Display the estimated PIN value  estimate@pin #> [1] 0.5661721  # Store the posterior probabilities in a dataframe variable and display its # first 6 rows.  modelposteriors <- get_posteriors(estimate) show(round(head(modelposteriors), 3)) #>   post.N post.G post.B #> 1      1      0      0 #> 2      0      1      0 #> 3      0      1      0 #> 4      0      1      0 #> 5      0      1      0 #> 6      0      1      0  # ------------------------------------------------------------------------ # # Posterior probabilities for MPIN estimates                               # # ------------------------------------------------------------------------ #  # Estimate MPIN via the ECM algorithm, assuming that the dataset has 2 # information layers  estimate <- mpin_ecm(xdata, layers = 2, verbose = FALSE)  # Display the estimated Multilayer PIN value  show(estimate@mpin) #> [1] 0.576684  # Store the posterior probabilities in a dataframe variable and display its # first six rows. The posterior probabilities are contained in a dataframe # with 7 variables: one for no-information days, and two variables for each # layer, one for good-information days and one for bad-information days.  modelposteriors <- get_posteriors(estimate) show(round(head(modelposteriors), 3)) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'show': non-numeric argument to mathematical function"},{"path":"https://www.pinstimation.com/reference/hfdata.html","id":null,"dir":"Reference","previous_headings":"","what":"High-frequency trade-data — hfdata","title":"High-frequency trade-data — hfdata","text":"simulated dataset containing sample timestamp, price, volume, bid ask 100 000 high frequency transactions.","code":""},{"path":"https://www.pinstimation.com/reference/hfdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"High-frequency trade-data — hfdata","text":"","code":"hfdata"},{"path":"https://www.pinstimation.com/reference/hfdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"High-frequency trade-data — hfdata","text":"data frame 100 000 observations 5 variables: timestamp: time trade. price: transaction price. volume: volume transactions, asset units. bid: best bid price. ask: best ask price.","code":""},{"path":"https://www.pinstimation.com/reference/hfdata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"High-frequency trade-data — hfdata","text":"Artificially created data set.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin.html","id":null,"dir":"Reference","previous_headings":"","what":"AdjPIN initial parameter sets of Ersan & Ghachem (2022b) — initials_adjpin","title":"AdjPIN initial parameter sets of Ersan & Ghachem (2022b) — initials_adjpin","text":"Based algorithm Ersan Ghachem (2022b) , generates sets initial parameters used maximum likelihood estimation AdjPIN model.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AdjPIN initial parameter sets of Ersan & Ghachem (2022b) — initials_adjpin","text":"","code":"initials_adjpin(data, xtraclusters = 4, restricted = list(),  verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/initials_adjpin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AdjPIN initial parameter sets of Ersan & Ghachem (2022b) — initials_adjpin","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). xtraclusters integer used divide trading days #(4 + xtraclusters) clusters, thereby resulting #comb(4 + xtraclusters - 1, 4 - 1) initial parameter sets line Ersan Alici (2016) , Ersan Ghachem (2022b) .default value 4 chosen Ersan (2016) . restricted binary list allows estimating restricted AdjPIN models specifying model parameters assumed equal. contains one multiple following four elements {theta, mu, eps, d}. instance, theta set TRUE, probability liquidity shock -information days, information days assumed (\\(\\theta\\)=\\(\\theta'\\)). remaining rate elements {mu, eps, d} set TRUE, (say  mu=TRUE), rate assumed buy side, sell side (\\(\\mu\\)b=\\(\\mu\\)s). one element set TRUE, restrictions combined. instance, argument restricted set list(theta=TRUE, eps=TRUE, d=TRUE), restricted AdjPIN model estimated, \\(\\theta\\)=\\(\\theta'\\), \\(\\epsilon\\)b=\\(\\epsilon\\)s, \\(\\Delta\\)b=\\(\\Delta\\)s. value argument restricted empty list, parameters model assumed independent, unrestricted model estimated. default value empty list list(). verbose binary variable determines whether information messages initial parameter sets, including number initial parameter sets generated. message shown verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AdjPIN initial parameter sets of Ersan & Ghachem (2022b) — initials_adjpin","text":"Returns dataframe numerical vectors ten elements {\\(\\alpha\\), \\(\\delta\\), \\(\\theta\\), \\(\\theta'\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s, \\(\\mu\\)b, \\(\\mu\\)s, \\(\\Delta\\)b, \\(\\Delta\\)s}.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AdjPIN initial parameter sets of Ersan & Ghachem (2022b) — initials_adjpin","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored. function initials_adjpin() implements algorithm suggested Ersan Ghachem (2022b) , uses hierarchical agglomerative clustering (HAC) find initial parameter sets maximum likelihood estimation.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"AdjPIN initial parameter sets of Ersan & Ghachem (2022b) — initials_adjpin","text":"Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420. Ersan O, Alici (2016). “unbiased computation methodology estimating probability informed trading (PIN).” Journal International Financial Markets, Institutions Money, 43, 74--94. ISSN 10424431. Ersan O, Ghachem M (2022b). “methodological approach computational problems estimation adjusted PIN model.” Available SSRN 4117954.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AdjPIN initial parameter sets of Ersan & Ghachem (2022b) — initials_adjpin","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # Obtain a dataframe of initial parameter sets for the maximum likelihood # estimation using the algorithm of Ersan and Ghachem (2022b).  init.sets <- initials_adjpin(xdata) #> The function initials_adjpin(...) has generated 49 initial parameter sets. #>  To display the initial sets, store them in a variable or call (initials_adjpin(...)).  #>  To hide these messages, set the argument 'verbose' to FALSE (verbose = FALSE). #>   # Use the list to estimate adjpin using the adjpin() method # Show the value of adjusted PIN  estimate <- adjpin(xdata, initialsets = init.sets, verbose = FALSE) show(estimate@adjpin) #> [1] 0.2950832"},{"path":"https://www.pinstimation.com/reference/initials_adjpin_cl.html","id":null,"dir":"Reference","previous_headings":"","what":"AdjPIN initial parameter sets of Cheng and Lai (2021) — initials_adjpin_cl","title":"AdjPIN initial parameter sets of Cheng and Lai (2021) — initials_adjpin_cl","text":"Based extension algorithm Cheng Lai (2021) , generates sets initial parameters used maximum likelihood estimation AdjPIN model.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin_cl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AdjPIN initial parameter sets of Cheng and Lai (2021) — initials_adjpin_cl","text":"","code":"initials_adjpin_cl(data, restricted = list(), verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/initials_adjpin_cl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AdjPIN initial parameter sets of Cheng and Lai (2021) — initials_adjpin_cl","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). restricted binary list allows estimating restricted AdjPIN models specifying model parameters assumed equal. contains one multiple following four elements {theta, mu, eps, d}. instance, theta set TRUE, probability liquidity shock -information days, information days assumed (\\(\\theta\\)=\\(\\theta'\\)). remaining rate elements {mu, eps, d} set TRUE, (say  mu=TRUE), rate assumed buy side, sell side (\\(\\mu\\)b=\\(\\mu\\)s). one element set TRUE, restrictions combined. instance, argument restricted set list(theta=TRUE, eps=TRUE, d=TRUE), restricted AdjPIN model estimated, \\(\\theta\\)=\\(\\theta'\\), \\(\\epsilon\\)b=\\(\\epsilon\\)s, \\(\\Delta\\)b=\\(\\Delta\\)s. value argument restricted empty list, parameters model assumed independent, unrestricted model estimated. default value empty list list(). verbose binary variable determines whether information messages initial parameter sets, including number initial parameter sets generated. message shown verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin_cl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AdjPIN initial parameter sets of Cheng and Lai (2021) — initials_adjpin_cl","text":"Returns dataframe numerical vectors ten elements {\\(\\alpha\\), \\(\\delta\\), \\(\\theta\\), \\(\\theta'\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s, \\(\\mu\\)b, \\(\\mu\\)s, \\(\\Delta\\)b, \\(\\Delta\\)s}.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin_cl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AdjPIN initial parameter sets of Cheng and Lai (2021) — initials_adjpin_cl","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored.  function implements extension algorithm Cheng Lai (2021) . paper, authors assume probability liquidity shock -information, information days, .e., \\(\\theta\\)=\\(\\theta'\\), use procedure similar Yan Zhang (2012)  generate 64 initial parameter sets. function implements extension algorithm, relaxing assumption equality liquidity shock probabilities, generates thereby 256 initial parameter sets unrestricted AdjPIN model.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin_cl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"AdjPIN initial parameter sets of Cheng and Lai (2021) — initials_adjpin_cl","text":"Cheng T, Lai H (2021). “Improvements estimating probability informed trading models.” Quantitative Finance, 21(5), 771-796. Yan Y, Zhang S (2012). “improved estimation method empirical properties probability informed trading.” Journal Banking Finance, 36(2), 454--467. ISSN 03784266.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin_cl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AdjPIN initial parameter sets of Cheng and Lai (2021) — initials_adjpin_cl","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # The function adjpin(xdata, initialsets=\"CL\") allows the user to directly # estimate the AdjPIN model using the full set of initial parameter sets # generated using the algorithm Cheng and Lai (2021) # \\donttest{ estimate.1 <- adjpin(xdata,  initialsets=\"CL\", verbose = FALSE) # }  # Obtaining the set of initial parameter sets using initials_adjpin_cl # allows us to estimate the PIN model using a subset of these initial sets.  # Use initials_adjpin_cl() to generate 256 initial parameter sets using the # algorithm of Cheng and Lai (2021).  initials_cl <- initials_adjpin_cl(xdata, verbose = FALSE)  # Use 50 randonly chosen initial sets from the dataframe 'initials_cl' in # order to estimate the AdjPIN model using the function adjpin() with custom # initial parameter sets  numberofsets <- nrow(initials_cl) selectedsets <- initials_cl[sample(numberofsets, 50),]  estimate.2 <- adjpin(xdata, initialsets = selectedsets, verbose = FALSE)  # Compare the parameters and the pin values of both specifications # \\donttest{ comparison <- rbind( c(estimate.1@parameters, adjpin = estimate.1@adjpin, psos = estimate.1@psos), c(estimate.2@parameters, estimate.2@adjpin, estimate.2@psos))  rownames(comparison) <- c(\"all\", \"50\")  show(comparison) #>         alpha     delta  theta    thetap    eps.b    eps.s     mu.b     mu.s #> all 0.7333333 0.1363636 0.0625 0.6363636 337.1669 335.9816 599.1243 871.1851 #> 50  0.5833333 0.1714286 0.4000 0.8000000 337.2003 336.1692 912.5743 870.9975 #>         d.b        d.s    adjpin      psos #> all 912.750 0.38320562 0.2950956 0.2791467 #> 50  599.118 0.02282304 0.3340774 0.2400096 # }"},{"path":"https://www.pinstimation.com/reference/initials_adjpin_rnd.html","id":null,"dir":"Reference","previous_headings":"","what":"AdjPIN random initial sets — initials_adjpin_rnd","title":"AdjPIN random initial sets — initials_adjpin_rnd","text":"Generates random initial parameter sets used estimation AdjPIN model Duarte Young (2009) .","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin_rnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AdjPIN random initial sets — initials_adjpin_rnd","text":"","code":"initials_adjpin_rnd(data, restricted = list(), num_init = 20,  verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/initials_adjpin_rnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AdjPIN random initial sets — initials_adjpin_rnd","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). restricted binary list allows estimating restricted AdjPIN models specifying model parameters assumed equal. contains one multiple following four elements {theta, mu, eps, d}. instance, theta set TRUE, probability liquidity shock -information days, information days assumed (\\(\\theta\\)=\\(\\theta'\\)). remaining rate elements {mu, eps, d} set TRUE, (say  mu=TRUE), rate assumed buy side, sell side (\\(\\mu\\)b=\\(\\mu\\)s). one element set TRUE, restrictions combined. instance, argument restricted set list(theta=TRUE, eps=TRUE, d=TRUE), restricted AdjPIN model estimated, \\(\\theta\\)=\\(\\theta'\\), \\(\\epsilon\\)b=\\(\\epsilon\\)s, \\(\\Delta\\)b=\\(\\Delta\\)s. value argument restricted empty list (list()), parameters model assumed independent, unrestricted model estimated. default value empty list list(). num_init integer corresponds number initial parameter sets generated. default value 20. verbose binary variable determines whether information messages initial parameter sets, including number initial parameter sets generated. message shown verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin_rnd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AdjPIN random initial sets — initials_adjpin_rnd","text":"Returns dataframe numerical vectors ten elements {\\(\\alpha\\), \\(\\delta\\), \\(\\theta\\), \\(\\theta'\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s, \\(\\mu\\)b, \\(\\mu\\)s, \\(\\Delta\\)b, \\(\\Delta\\)s}.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin_rnd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AdjPIN random initial sets — initials_adjpin_rnd","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored.  buy rate parameters {\\(\\epsilon\\)b, \\(\\mu\\)b, \\(\\Delta\\)b} randomly generated interval (minB, maxB), minB (maxB) smallest (largest) value buys dataset, condition \\(\\epsilon\\)b+\\(\\mu\\)b+\\(\\Delta\\)b< maxB. Analogously, sell rate parameters {\\(\\epsilon\\)s, \\(\\mu\\)s, \\(\\Delta\\)s} randomly generated interval (minS, maxS), minS (maxS) smallest(largest) value sells dataset, condition \\(\\epsilon\\)s+\\(\\mu\\)s+\\(\\Delta\\)s < maxS.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin_rnd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"AdjPIN random initial sets — initials_adjpin_rnd","text":"Duarte J, Young L (2009). “PIN priced?” Journal Financial Economics, 91(2), 119--138. ISSN 0304405X.","code":""},{"path":"https://www.pinstimation.com/reference/initials_adjpin_rnd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AdjPIN random initial sets — initials_adjpin_rnd","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # Obtain a dataframe of 20 random initial parameters for the MLE of # the AdjPIN model using the initials_adjpin_rnd().  initial.sets <- initials_adjpin_rnd(xdata, num_init = 20) #> The function initials_adjpin_rnd(...) has generated 20 initial parameter sets. #>  To display the initial sets, store them in a variable or call (initials_adjpin_rnd(...)).  #>  To hide these messages, set the argument 'verbose' to FALSE (verbose = FALSE). #>   # Use the dataframe to estimate the AdjPIN model using the adjpin() # function.  estimate <- adjpin(xdata, initialsets = initial.sets, verbose = FALSE)  # Show the value of adjusted PIN  show(estimate@adjpin) #> [1] 0.2950957"},{"path":"https://www.pinstimation.com/reference/initials_mpin.html","id":null,"dir":"Reference","previous_headings":"","what":"MPIN initial parameter sets of Ersan (2016) — initials_mpin","title":"MPIN initial parameter sets of Ersan (2016) — initials_mpin","text":"Based algorithm Ersan (2016) , generates initial parameter sets maximum likelihood estimation MPIN model.","code":""},{"path":"https://www.pinstimation.com/reference/initials_mpin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MPIN initial parameter sets of Ersan (2016) — initials_mpin","text":"","code":"initials_mpin(data, layers = NULL, detectlayers = \"EG\",  xtraclusters = 4, verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/initials_mpin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MPIN initial parameter sets of Ersan (2016) — initials_mpin","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). layers integer referring assumed number information layers data. value layers NULL, number layers automatically determined one following functions: detectlayers_e(), detectlayers_eg(), detectlayers_ecm(). default value NULL. detectlayers character string referring layer detection algorithm used determine number layers data. takes one three values: \"E\", \"EG\", \"ECM\". \"E\" refers algorithm Ersan (2016) , \"EG\" refers algorithm Ersan Ghachem (2022a) ; \"ECM\" refers algorithm Ghachem Ersan (2022a) . default value \"EG\". Comparative results layer detection algorithms can found Ersan Ghachem (2022a) . xtraclusters integer used divide trading days #(1 + layers + xtraclusters) clusters, thereby resulting #comb(layers + xtraclusters, layers) initial parameter sets line Ersan Alici (2016) , Ersan (2016) . default value 4 chosen Ersan (2016) . verbose binary variable determines whether information messages initial parameter sets, including number initial parameter sets generated. message shown verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/initials_mpin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MPIN initial parameter sets of Ersan (2016) — initials_mpin","text":"Returns dataframe initial parameter sets consisting 3J + 2 variables {\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s}. \\(\\alpha\\), \\(\\delta\\), \\(\\mu\\) vectors length J J number layers MPIN model.","code":""},{"path":"https://www.pinstimation.com/reference/initials_mpin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MPIN initial parameter sets of Ersan (2016) — initials_mpin","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored.","code":""},{"path":"https://www.pinstimation.com/reference/initials_mpin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MPIN initial parameter sets of Ersan (2016) — initials_mpin","text":"Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420. Ersan O, Alici (2016). “unbiased computation methodology estimating probability informed trading (PIN).” Journal International Financial Markets, Institutions Money, 43, 74--94. ISSN 10424431. Ersan O, Ghachem M (2022a). “Identifying information types probability informed trading (PIN) models: improved algorithm.” Available SSRN 4117956. Ghachem M, Ersan O (2022a). “Estimation probability informed trading models via expectation-conditional maximization algorithm.” Available SSRN 4117952.","code":""},{"path":"https://www.pinstimation.com/reference/initials_mpin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MPIN initial parameter sets of Ersan (2016) — initials_mpin","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # Obtain a dataframe of initial parameter sets for estimation of the MPIN # model using the algorithm of Ersan (2016) with 3 extra clusters. # By default, the number of layers in the data is detected using the # algorithm of Ersan and Ghachem (2022a).  initparams <- initials_mpin(xdata, xtraclusters = 3) #> The function initials_mpin(...) has generated  initial parameter sets. #>  To display the initial sets, store them in a variable or call (initials_mpin(...)).  #>  To hide these messages, set the argument 'verbose' to FALSE (verbose = FALSE). #>   # Show the initial parameter sets  show(round(initparams, 2)) #>    alpha.1 alpha.2 alpha.3 delta.1 delta.2 delta.3    mu.1    mu.2    mu.3 #> 1     0.12    0.10    0.53    0.29    0.17    0.09  561.02  644.36 1462.72 #> 2     0.12    0.15    0.48    0.29    0.33    0.03  561.02  762.24 1510.80 #> 3     0.12    0.22    0.42    0.29    0.23    0.04  561.02  973.02 1520.96 #> 4     0.12    0.53    0.10    0.29    0.12    0.00  561.02 1286.97 1581.71 #> 5     0.22    0.05    0.48    0.23    0.67    0.03  599.48  997.99 1510.80 #> 6     0.22    0.12    0.42    0.23    0.29    0.04  599.48 1254.73 1520.96 #> 7     0.22    0.43    0.10    0.23    0.12    0.00  599.48 1435.26 1581.71 #> 8     0.27    0.07    0.42    0.31    0.00    0.04  674.20 1447.29 1520.96 #> 9     0.27    0.38    0.10    0.31    0.04    0.00  674.20 1492.30 1581.71 #> 10    0.33    0.32    0.10    0.25    0.05    0.00  828.82 1501.77 1581.71 #> 11    0.10    0.05    0.48    0.17    0.67    0.03  584.02 1028.16 1426.52 #> 12    0.10    0.12    0.42    0.17    0.29    0.04  584.02 1215.94 1437.68 #> 13    0.10    0.43    0.10    0.17    0.12    0.00  584.02 1365.64 1491.19 #> 14    0.15    0.07    0.42    0.33    0.00    0.04  732.06 1356.78 1437.68 #> 15    0.15    0.38    0.10    0.33    0.04    0.00  732.06 1409.65 1491.19 #> 16    0.22    0.32    0.10    0.23    0.05    0.00  924.28 1420.79 1491.19 #> 17    0.05    0.07    0.42    0.67    0.00    0.04 1052.74 1283.03 1369.84 #> 18    0.05    0.38    0.10    0.67    0.04    0.00 1052.74 1342.32 1417.45 #> 19    0.12    0.32    0.10    0.29    0.05    0.00 1184.33 1354.80 1417.45 #> 20    0.07    0.32    0.10    0.00    0.05    0.00 1290.24 1361.25 1424.66 #>     eps.b  eps.s #> 1  336.14 336.19 #> 2  336.14 336.19 #> 3  336.14 336.19 #> 4  336.14 336.19 #> 5  336.14 336.19 #> 6  336.14 336.19 #> 7  336.14 336.19 #> 8  336.14 336.19 #> 9  336.14 336.19 #> 10 336.14 336.19 #> 11 446.88 356.41 #> 12 446.88 356.41 #> 13 446.88 356.41 #> 14 446.88 356.41 #> 15 446.88 356.41 #> 16 446.88 356.41 #> 17 531.68 367.46 #> 18 531.68 367.46 #> 19 531.68 367.46 #> 20 556.69 399.68  # Use 10 randomly selected initial parameter sets from initparams to # estimate the probability of informed trading via mpin_ecm. The number # of information layers will be detected from the initial parameter sets.  numberofsets <- nrow(initparams) selectedsets <- initparams[sample(numberofsets, 10),]  estimate <- mpin_ecm(xdata, initialsets = selectedsets, verbose = FALSE)  # Display the estimated MPIN value  show(estimate@mpin) #> [1] 0.5744481  # Display the estimated parameters as a numeric vector.  show(unlist(estimate@parameters)) #> alpha.layer.1 alpha.layer.2 alpha.layer.3 delta.layer.1 delta.layer.2  #>  2.166667e-01  5.000000e-02  4.833333e-01  2.307692e-01  6.666667e-01  #> delta.layer.3    mu.layer.1    mu.layer.2    mu.layer.3         eps.b  #>  3.448276e-02  6.028381e+02  9.864245e+02  1.506785e+03  3.369193e+02  #>         eps.s  #>  3.358877e+02   # Store the posterior probabilities in a variable, and show the first 6 rows.  modelposteriors <- get_posteriors(estimate) show(round(head(modelposteriors), 3)) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'show': non-numeric argument to mathematical function"},{"path":"https://www.pinstimation.com/reference/initials_pin_ea.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial parameter sets of Ersan & Alici (2016) — initials_pin_ea","title":"Initial parameter sets of Ersan & Alici (2016) — initials_pin_ea","text":"Based algorithm Ersan Alici (2016), generates initial parameter sets maximum likelihood estimation PIN model.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_ea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial parameter sets of Ersan & Alici (2016) — initials_pin_ea","text":"","code":"initials_pin_ea(data, xtraclusters = 4, verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/initials_pin_ea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial parameter sets of Ersan & Alici (2016) — initials_pin_ea","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). xtraclusters integer used divide trading days #(2 + xtraclusters) clusters, thereby resulting #comb(1 + xtraclusters, 1) initial parameter sets line Ersan Alici (2016) . default value 4. verbose binary variable determines whether information messages initial parameter sets, including number initial parameter sets generated. message shown verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_ea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial parameter sets of Ersan & Alici (2016) — initials_pin_ea","text":"Returns dataframe initial sets consisting five variables {\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s}.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_ea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initial parameter sets of Ersan & Alici (2016) — initials_pin_ea","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored. function initials_pin_ea() uses hierarchical agglomerative clustering (HAC) find initial parameter sets maximum likelihood estimation. steps Ersan Alici (2016)  algorithm differ used Gan et al. (2015) , summarized . Via use HAC, daily absolute order imbalances (AOIs) grouped 2+J (default J=4) clusters. sorting clusters based AOIs, combined two larger groups days (event -event) merging neighboring clusters . Consequently, groups formed #comb(5, 1) = 5 different ways. 5 configurations , days grouped two (event group -event group), procedure applied obtain initial parameter sets.  Days event group (one larger mean AOI) distributed two groups, .e. good-event days (days positive OI) bad-event days (days negative OI). Initial parameters obtained frequencies, average trade rates three types days. See Ersan Alici (2016)  details. higher number additional clusters (xtraclusters), better estimation. Ersan Alici (2016) , however, shown benefit increasing number beyond 4 marginal, statistically insignificant.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_ea.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Initial parameter sets of Ersan & Alici (2016) — initials_pin_ea","text":"Ersan O, Alici (2016). “unbiased computation methodology estimating probability informed trading (PIN).” Journal International Financial Markets, Institutions Money, 43, 74--94. ISSN 10424431. Gan Q, Wei WC, Johnstone D (2015). “faster estimation method probability informed trading using hierarchical agglomerative clustering.” Quantitative Finance, 15(11), 1805--1821.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_ea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initial parameter sets of Ersan & Alici (2016) — initials_pin_ea","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # Obtain a dataframe of initial parameters for the maximum likelihood # estimation using the algorithm of Ersan and Alici (2016).  init.sets <- initials_pin_ea(xdata) #> The function initials_pin_ea(...) has generated 5 initial parameter sets. #>  To display the initial sets, store them in a variable or call (initials_pin_ea(...)).  #>  To hide these messages, set the argument 'verbose' to FALSE (verbose = FALSE). #>   # Use the obtained dataframe to estimate the PIN model using the function # pin() with custom initial parameter sets  estimate.1 <- pin(xdata, initialsets = init.sets, verbose = FALSE)  # pin_ea() directly estimates the PIN model using initial parameter sets # generated using the algorithm of Ersan & Alici (2016).  estimate.2 <- pin_ea(xdata, verbose = FALSE)  # Check that the obtained results are identical  show(estimate.1@parameters) #>        alpha        delta           mu        eps.b        eps.s  #>    0.7499975    0.1333342 1193.5179655  357.2659099  328.6291793  show(estimate.2@parameters) #>        alpha        delta           mu        eps.b        eps.s  #>    0.7499975    0.1333342 1193.5179655  357.2659099  328.6291793"},{"path":"https://www.pinstimation.com/reference/initials_pin_gwj.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial parameter set of Gan et al.(2015) — initials_pin_gwj","title":"Initial parameter set of Gan et al.(2015) — initials_pin_gwj","text":"Based algorithm Gan et al. (2015) , generates initial parameter set maximum likelihood estimation PIN model.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_gwj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial parameter set of Gan et al.(2015) — initials_pin_gwj","text":"","code":"initials_pin_gwj(data, verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/initials_pin_gwj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial parameter set of Gan et al.(2015) — initials_pin_gwj","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). verbose binary variable determines whether information messages initial parameter sets, including number initial parameter sets generated. message shown verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_gwj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial parameter set of Gan et al.(2015) — initials_pin_gwj","text":"Returns dataframe containing numerical vector five elements {\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s}.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_gwj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initial parameter set of Gan et al.(2015) — initials_pin_gwj","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_gwj.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Initial parameter set of Gan et al.(2015) — initials_pin_gwj","text":"Gan Q, Wei WC, Johnstone D (2015). “faster estimation method probability informed trading using hierarchical agglomerative clustering.” Quantitative Finance, 15(11), 1805--1821.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_gwj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initial parameter set of Gan et al.(2015) — initials_pin_gwj","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # Obtain the initial parameter set for the maximum likelihood estimation # using the algorithm of Gan et al.(2015).  initparams <- initials_pin_gwj(xdata) #> The function initials_pin_gwj(...) has generated 1 initial parameter sets. #>  To display the initial sets, store them in a variable or call (initials_pin_gwj(...)).  #>  To hide these messages, set the argument 'verbose' to FALSE (verbose = FALSE). #>   # Use the obtained dataframe to estimate the PIN model using the function # pin() with custom initial parameter sets  estimate.1 <- pin(xdata, initialsets = initparams, verbose = FALSE)  # pin_gwj() directly estimates the PIN model using an initial parameter set # generated using the algorithm of Gan et al.(2015).  estimate.2 <- pin_gwj(xdata, \"E\", verbose = FALSE)  # Check that the obtained results are identical  show(estimate.1@parameters) #>        alpha        delta           mu        eps.b        eps.s  #>    0.5833376    0.1714269 1197.2546207  554.0730552  328.5610583  show(estimate.2@parameters) #>        alpha        delta           mu        eps.b        eps.s  #>    0.5833376    0.1714269 1197.2546207  554.0730552  328.5610583"},{"path":"https://www.pinstimation.com/reference/initials_pin_yz.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial parameter sets of Yan and Zhang (2012) — initials_pin_yz","title":"Initial parameter sets of Yan and Zhang (2012) — initials_pin_yz","text":"Based grid search algorithm Yan Zhang (2012) , generates initial parameter sets maximum likelihood estimation PIN model.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_yz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial parameter sets of Yan and Zhang (2012) — initials_pin_yz","text":"","code":"initials_pin_yz(data, grid_size = 5, ea_correction = FALSE,  verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/initials_pin_yz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial parameter sets of Yan and Zhang (2012) — initials_pin_yz","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). grid_size integer 1, 20; representing size grid. default value 5. See details. ea_correction binary variable determining whether modifications algorithm Yan Zhang (2012)  suggested Ersan Alici (2016)  implemented. default value FALSE. verbose binary variable determines whether information messages initial parameter sets, including number initial parameter sets generated. message shown verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_yz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial parameter sets of Yan and Zhang (2012) — initials_pin_yz","text":"Returns dataframe initial sets consisting five variables {\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s}.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_yz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initial parameter sets of Yan and Zhang (2012) — initials_pin_yz","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored. argument grid_size determines size grid variables: alpha, delta, eps.b. grid_size set given value m, algorithm creates sequence starting 1/2m, ending 1 - 1/2m, step 1/m. default value 5 corresponds size grid Yan Zhang (2012) . case, sequence starts 0.1 = 1/(2 x 5), ends 0.9 = 1 - 1/(2 x 5) step 0.2 = 1/m. function initials_pin_yz() implements, default, original Yan Zhang (2012)  algorithm default value ea_correction takes value FALSE. value ea_correction set TRUE; , sets irrelevant mu values excluded, sets boundary values reintegrated initial parameter sets.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_yz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Initial parameter sets of Yan and Zhang (2012) — initials_pin_yz","text":"Ersan O, Alici (2016). “unbiased computation methodology estimating probability informed trading (PIN).” Journal International Financial Markets, Institutions Money, 43, 74--94. ISSN 10424431. Yan Y, Zhang S (2012). “improved estimation method empirical properties probability informed trading.” Journal Banking Finance, 36(2), 454--467. ISSN 03784266.","code":""},{"path":"https://www.pinstimation.com/reference/initials_pin_yz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initial parameter sets of Yan and Zhang (2012) — initials_pin_yz","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # The function pin_yz() allows the user to directly estimate the PIN model # using the full set of initial parameter sets generated using the algorithm # of Yan and # Zhang (2012). # \\donttest{ estimate.1 <- pin_yz(xdata, verbose = FALSE) # } # Obtaining the set of initial parameter sets using initials_pin_yz allows # us to estimate the PIN model using a subset of these initial sets.  initparams <- initials_pin_yz(xdata, verbose = FALSE)  # Use 10 randonly chosen initial sets from the dataframe 'initparams' in # order to estimate the PIN model using the function pin() with custom # initial parameter sets  numberofsets <- nrow(initparams) selectedsets <- initparams[sample(numberofsets, 10),]  estimate.2 <- pin(xdata, initialsets = selectedsets, verbose = FALSE)  # Compare the parameters and the pin values of both specifications # \\donttest{ comparison <- rbind(c(estimate.1@parameters, pin = estimate.1@pin),                     c(estimate.2@parameters, estimate.2@pin))  rownames(comparison) <- c(\"all\", \"10\")  show(comparison) #>         alpha     delta       mu    eps.b    eps.s       pin #> all 0.7500027 0.1333335 1193.518 357.2654 328.6293 0.5661740 #> 10  0.7499988 0.1333350 1193.518 357.2658 328.6293 0.5661726 # }"},{"path":"https://www.pinstimation.com/reference/mpin_ecm.html","id":null,"dir":"Reference","previous_headings":"","what":"MPIN model estimation via an ECM algorithm — mpin_ecm","title":"MPIN model estimation via an ECM algorithm — mpin_ecm","text":"Estimates multilayer probability informed trading (MPIN) using Expectation Conditional Maximization algorithm, Ghachem Ersan (2022a) .","code":""},{"path":"https://www.pinstimation.com/reference/mpin_ecm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MPIN model estimation via an ECM algorithm — mpin_ecm","text":"","code":"mpin_ecm(data, layers = NULL, xtraclusters = 4, initialsets = NULL,                       ..., verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/mpin_ecm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MPIN model estimation via an ECM algorithm — mpin_ecm","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). layers integer referring assumed number information layers data. argument layers given, ECM algorithm use number layers provided. layers omitted, function mpin_ecm() simultaneously optimize number layers well parameters MPIN model. xtraclusters integer used divide trading days #(1 + layers + xtraclusters) clusters, thereby resulting #comb((layers + xtraclusters, layers) initial parameter sets line Ersan Alici (2016) , Ersan (2016) . default value 4 chosen Ersan (2016) . initialsets dataframe containing initial parameter sets estimation MPIN model. default value NULL. initialsets NULL, initial parameter sets provided function initials_mpin(). ... Additional arguments passed function mpin_ecm. recognized arguments hyperparams, is_parallel. hyperparams list containing hyperparameters ECM algorithm. empty, contains one  following elements: minalpha, maxeval, tolerance, criterion, maxlayers. elements details section. is_parallel logical variable specifies whether computation performed using parallel sequential processing. default value FALSE. verbose (logical) binary variable determines whether detailed information steps estimation MPIN model displayed. output produced verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/mpin_ecm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MPIN model estimation via an ECM algorithm — mpin_ecm","text":"Returns object class estimate.mpin.ecm.","code":""},{"path":"https://www.pinstimation.com/reference/mpin_ecm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MPIN model estimation via an ECM algorithm — mpin_ecm","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored. initial parameters expectation-conditional maximization algorithm computed using function initials_mpin()  default settings. factorization MPIN likelihood function used developed Ersan (2016) , implemented fact_mpin(). argument hyperparams contains hyperparameters ECM algorithm. either empty contains one following elements: minalpha (numeric) stands minimum share days belonging  given layer, .e., layers falling threshold removed iteration, model estimated lower number layers. missing, minalpha takes default value 0.001. maxeval: (integer) stands maximum number iterations ECM  algorithm initial parameter set. missing, maxeval takes default value 100. tolerance (numeric) ECM algorithm stopped (relative) change log-likelihood  smaller tolerance. missing, tolerance takes default value 0.001. criterion (character) model selection criterion used find optimal estimate  MPIN model. take one values \"BIC\", \"AIC\" \"AWE\"; stand Bayesian Information Criterion,  Akaike Information Criterion Approximate Weight Evidence, respectively (Akogul Erisoglu 2016) . missing, criterion takes  default value \"BIC\". maxlayers (integer) upper limit number layers used estimation ECM algorithm.  argument layers missing, ECM algorithm estimate MPIN models layers integer set 1 maxlayers. missing, maxlayers takes default value 8. maxinit (integer) maximum number initial sets used individual estimation ECM algorithm. missing, maxinit takes default value 100. argument layers given, Expectation Conditional Maximization algorithm use number  layers provided. layers omitted, function mpin_ecm() simultaneously optimize number layers well parameters MPIN model. Practically, function mpin_ecm() uses ECM algorithm optimize MPIN model parameters number layers within integer set 1 8 (maxlayers specified argument hyperparams); returns optimal model lowest Bayesian information  criterion (BIC) (lowest information criterion criterion specified argument hyperparams).","code":""},{"path":"https://www.pinstimation.com/reference/mpin_ecm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MPIN model estimation via an ECM algorithm — mpin_ecm","text":"Akogul S, Erisoglu M (2016). “comparison information criteria clustering based mixture multivariate normal distributions.” Mathematical Computational Applications, 21(3), 34. Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420. Ersan O, Alici (2016). “unbiased computation methodology estimating probability informed trading (PIN).” Journal International Financial Markets, Institutions Money, 43, 74--94. ISSN 10424431. Ghachem M, Ersan O (2022a). “Estimation probability informed trading models via expectation-conditional maximization algorithm.” Available SSRN 4117952.","code":""},{"path":"https://www.pinstimation.com/reference/mpin_ecm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MPIN model estimation via an ECM algorithm — mpin_ecm","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # Estimate the MPIN model using the expectation-conditional maximization # (ECM) algorithm.  # ------------------------------------------------------------------------ # # Estimate the MPIN model, assuming that there exists 2 information layers # # in the dataset                                                           # # ------------------------------------------------------------------------ #  estimate <- mpin_ecm(xdata, layers = 2, verbose = FALSE)  # Show the estimation output  show(estimate) #> ---------------------------------- #> MPIN estimation completed successfully #> ---------------------------------- #> Likelihood factorization: Ersan (2016) #> Estimation Algorithm \t: Expectation Conditional Maximization #> Initial parameter sets\t: Ersan (2016), Ersan and Alici (2016) #> Info. layers in the data: provided by the user #> Selection criterion \t: Bayes Information Criterion (BIC) #> ---------------------------------- #> 15 initial set(s) are used for the 'current' estimation  #> Type object@initialsets to see the initial parameter sets used. #>  #>  #>  MPIN model   Regular Estimation   Sequential   #>  #> ===============  ========================= #> Variables        Estimates                 #> ===============  ========================= #> alpha            0.266667, 0.483333        #> delta            0.312500, 0.034483        #> mu               677.91, 1512.36           #> eps.b            331.07                    #> eps.s            338.2                     #> ----                                       #> Likelihood       (800.379)                 #> mpin(j)          0.114341, 0.462343        #> mpin             0.576684                  #> ----                                       #> AIC | BIC | AWE  1616.76, 1633.51, 1690.27 #> ===============  ========================= #>  #> ------- #> Running time: 0.48 seconds  # Display the optimal parameters from the Expectation Conditional # Maximization algorithm  show(estimate@parameters) #> $alpha #>   layer.1   layer.2  #> 0.2666667 0.4833333  #>  #> $delta #>    layer.1    layer.2  #> 0.31250000 0.03448276  #>  #> $mu #>   layer.1   layer.2  #>  677.9121 1512.3621  #>  #> $eps.b #> [1] 331.0696 #>  #> $eps.s #> [1] 338.2034 #>   # Display the global multilayer probability of informed trading  show(estimate@mpin) #> [1] 0.576684  # Display the multilayer probability of informed trading per layer  show(estimate@mpinJ) #>   layer.1   layer.2  #> 0.1143414 0.4623426   # Display the first five rows of the initial parameter sets used in the # expectation-conditional maximization estimation  show(round(head(estimate@initialsets, 5), 4)) #>   alpha.1 alpha.2 delta.1 delta.2      mu.1     mu.2    eps.b    eps.s #> 1  0.1167  0.6333  0.2857  0.1053  561.0181 1333.507 336.1429 336.1852 #> 2  0.2167  0.5333  0.2308  0.0938  599.4843 1462.722 336.1429 336.1852 #> 3  0.2667  0.4833  0.3125  0.0345  674.2034 1510.798 336.1429 336.1852 #> 4  0.3333  0.4167  0.2500  0.0400  828.8212 1520.959 336.1429 336.1852 #> 5  0.6500  0.1000  0.1538  0.0001 1156.6703 1581.709 336.1429 336.1852  # ------------------------------------------------------------------------ # # Omit the argument 'layers', so the ECM algorithm optimizes both the      # # number of layers and the MPIN model parameters.                          # # ------------------------------------------------------------------------ # # \\donttest{ estimate <- mpin_ecm(xdata, verbose = FALSE)  # Show the estimation output  show(estimate) #> ---------------------------------- #> MPIN estimation completed successfully #> ---------------------------------- #> Likelihood factorization: Ersan (2016) #> Estimation Algorithm \t: Expectation Conditional Maximization #> Initial parameter sets\t: Ersan (2016), Ersan and Alici (2016) #> Info. layers detected\t: using Ghachem and Ersan (2022) [ECM] #> Selection criterion \t: Bayes Information Criterion (BIC) #> ---------------------------------- #> 525 initial set(s) are used for all 8 estimations #> Type object@models for the estimation results for all models.  #> Type getSummary(object) for a summary of estimates for all models. #>  #>  MPIN model   Optimal Estimation   Sequential   #>  #> ===============  ============================ #> Variables        Estimates                    #> ===============  ============================ #> alpha            0.216667, 0.050000, 0.483333 #> delta            0.230769, 0.666667, 0.034483 #> mu               602.88, 986.45, 1506.84      #> eps.b            336.91                       #> eps.s            335.89                       #> ----                                          #> Likelihood       (643.458)                    #> mpin(j)          0.082619, 0.031196, 0.460648 #> mpin             0.574463                     #> ----                                          #> AIC | BIC | AWE  1308.92, 1331.95, 1409.99    #> ===============  ============================ #>  #>  #> Table: Summary of 8 MPIN estimations by ECM algorithm #>  #>              BIC      AIC      AWE    layers  #Sets  time #> ---------  -------  -------  -------  ------  -----  ---- #> model.1    6473.41  6462.94  6508.88    1         5  0.06 #> model.2    1633.51  1616.76  1690.27    2        15  0.47 #> model.3    1331.95  1308.92  1409.99    3        35   0.9 #> model.4**  1331.95  1308.92  1409.99    3        70  2.07 #> model.5    1331.95  1308.92  1409.99    3       100  2.76 #> model.6    1331.95  1308.92  1409.99    3       100  2.76 #> model.7    1342.58  1313.26  1441.9     4       100  3.37 #> model.8    1342.58  1313.26  1441.9     4       100  2.99 #>  #> ------- #> Running time: 15.38 seconds  # Display the optimal parameters from the estimation of the MPIN model using # the expectation-conditional maximization (ECM) algorithm  show(estimate@parameters) #> $alpha #>   layer.1   layer.2   layer.3  #> 0.2166667 0.0500000 0.4833333  #>  #> $delta #>    layer.1    layer.2    layer.3  #> 0.23076923 0.66666667 0.03448276  #>  #> $mu #>   layer.1   layer.2   layer.3  #>  602.8805  986.4454 1506.8365  #>  #> $eps.b #> [1] 336.9052 #>  #> $eps.s #> [1] 335.8866 #>   # Display the multilayer probability of informed trading  show(estimate@mpin) #> [1] 0.5744632  # Display the multilayer probability of informed trading per layer  show(estimate@mpinJ) #>    layer.1    layer.2    layer.3  #> 0.08261897 0.03119604 0.46064817   # Display the first five rows of the initial parameter sets used in the # expectation-conditional maximization estimation.  show(round(head(estimate@initialsets, 5), 4)) #>   alpha.1 alpha.2 alpha.3 alpha.4 delta.1 delta.2 delta.3 delta.4     mu.1 #> 1  0.0500  0.0667  0.1000  0.5333  0.3333  0.2500  0.1667  0.0938 540.0141 #> 2  0.1167  0.1000  0.0500  0.4833  0.2857  0.1667  0.6667  0.0345 561.0181 #> 3  0.2167  0.0500  0.0667  0.4167  0.2308  0.6667  0.0001  0.0400 599.4843 #> 4  0.2667  0.0667  0.1833  0.2333  0.3125  0.0001  0.0909  0.0001 674.2034 #> 5  0.3333  0.1833  0.1333  0.1000  0.2500  0.0909  0.0001  0.0001 828.8212 #>        mu.2      mu.3     mu.4    eps.b    eps.s #> 1  576.7712  644.3616 1462.722 336.1429 336.1852 #> 2  644.3616  997.9859 1510.798 336.1429 336.1852 #> 3  997.9859 1447.2923 1520.959 336.1429 336.1852 #> 4 1447.2923 1485.9437 1548.471 336.1429 336.1852 #> 5 1485.9437 1523.5423 1581.709 336.1429 336.1852 # } # ------------------------------------------------------------------------ # # Tweak in the hyperparameters of the ECM algorithm                        # # ------------------------------------------------------------------------ #  # Create a variable ecm.params containing the hyperparameters of the ECM # algorithm. This will surely make the ECM algorithm take more time to give # results  ecm.params <- list(tolerance = 0.0000001)  # If we suspect that the data contains more than eight information layers, we # can raise the number of models to be estimated to 10 as an example, i.e., # maxlayers = 10.  ecm.params$maxlayers <- 10  # We can also choose Approximate Weight of Evidence (AWE) for model # selection instead of the default Bayesian Information Criterion (BIC)  ecm.params$criterion <- 'AWE'  # We can also increase the maximum number of initial sets to 200, in # order to obtain higher level of accuracy for models with high number of # layers.  We set the sub-argument 'maxinit' to `200`. Remember that its # default value is `100`.  ecm.params$maxinit <- 200 # \\donttest{ estimate <- mpin_ecm(xdata, xtraclusters = 2, hyperparams = ecm.params,                                                       verbose = FALSE)  # We can change the model selection criterion by calling selectModel()  estimate <- selectModel(estimate, \"AIC\")  # We get the mpin_ecm estimation results for the MPIN model with 2 layers # using the slot models. We then show the first five rows of the # corresponding slot details.  models <- estimate@models show(round(head(models[[2]]@details, 5), 4)) #>       in.layer in.alpha.1 in.alpha.2 in.delta.1 in.delta.2   in.mu.1  in.mu.2 #> set.1        2     0.2167     0.5333     0.2308     0.0938  599.4843 1462.722 #> set.2        2     0.2667     0.4833     0.3125     0.0345  674.2034 1510.798 #> set.3        2     0.6500     0.1000     0.1538     0.0001 1156.6703 1581.709 #> set.4        2     0.0500     0.4833     0.6667     0.0345 1052.7404 1357.863 #> set.5        2     0.4333     0.1000     0.1154     0.0001 1308.9067 1417.445 #>       in.eps.b in.eps.s op.layer op.alpha.1 op.alpha.2 op.delta.1 op.delta.2 #> set.1 336.1429 336.1852        2     0.2667     0.4833     0.3125     0.0345 #> set.2 336.1429 336.1852        2     0.2667     0.4833     0.3125     0.0345 #> set.3 336.1429 336.1852        2     0.2667     0.4833     0.3125     0.0345 #> set.4 531.6774 367.4561        2     0.2667     0.4833     0.3125     0.0345 #> set.5 531.6774 367.4561        2     0.2667     0.4833     0.3125     0.0345 #>        op.mu.1  op.mu.2 op.eps.b op.eps.s likelihood   MPIN #> set.1 677.9278 1512.384 331.0641 338.2029  -800.3794 0.5767 #> set.2 677.9278 1512.384 331.0641 338.2029  -800.3794 0.5767 #> set.3 677.9278 1512.384 331.0641 338.2029  -800.3794 0.5767 #> set.4 677.9278 1512.384 331.0641 338.2029  -800.3794 0.5767 #> set.5 677.9278 1512.384 331.0641 338.2029  -800.3794 0.5767  # We can also use the function getSummary to get an idea about the change in # the estimation parameters as a function of the number of layers in the # MPIN model. The function getSummary returns a dataframe that contains, # among others, the number of layers of the model, the number of layers in # the optimal model,the MPIN value, and the values of the different # information criteria, namely AIC, BIC and AWE.  summary <- getSummary(estimate)  # We can plot the MPIN value and the layers at the optimal model as a # function of the number of layers to see whether additional layers in the # model actually contribute to a better precision in the probability of # informed trading. Remember that the hyperparameter 'minalpha' is # responsible for dropping layers with \"frequency\" lower than 'minalpha'.  plot(summary$layers, summary$MPIN,    type = \"o\", col = \"red\",    xlab = \"MPIN model layers\", ylab = \"MPIN value\"  )   plot(summary$layers, summary$em.layers,    type = \"o\", col = \"blue\",    xlab = \"MPIN model layers\", ylab = \"layers at the optimal model\" )  # }"},{"path":"https://www.pinstimation.com/reference/mpin_ml.html","id":null,"dir":"Reference","previous_headings":"","what":"MPIN model estimation via standard ML methods — mpin_ml","title":"MPIN model estimation via standard ML methods — mpin_ml","text":"Estimates multilayer probability informed trading (MPIN) using standard Maximum Likelihood method.","code":""},{"path":"https://www.pinstimation.com/reference/mpin_ml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MPIN model estimation via standard ML methods — mpin_ml","text":"","code":"mpin_ml(data, layers = NULL, xtraclusters = 4, initialsets = NULL, detectlayers = \"EG\", ..., verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/mpin_ml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MPIN model estimation via standard ML methods — mpin_ml","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). layers integer referring assumed number information layers data. argument layers given, maximum likelihood estimation use number layers provided. layers omitted, function mpin_ml() find optimal number layers using algorithm developed Ersan Ghachem (2022a)  (default). xtraclusters integer used divide trading days (1 + layers + xtraclusters) clusters, thereby resulting #comb(layers + xtraclusters, layers) initial parameter sets line Ersan Alici (2016) , Ersan (2016) . default value 4 chosen Ersan (2016) . initialsets dataframe containing initial parameter sets estimation MPIN model. default value NULL. initialsets NULL, initial parameter sets determined function initials_mpin(). detectlayers character string referring layer detection algorithm used determine number  layer data. takes one three values: \"E\", \"EG\", \"ECM\". \"E\" refers algorithm Ersan (2016) , \"EG\" refers algorithm Ersan Ghachem (2022a) ; \"ECM\" refers algorithm Ghachem Ersan (2022a) . default value \"EG\". Comparative results layer detection algorithms can found Ersan Ghachem (2022a) . ... Additional arguments passed function mpin_ml. recognized argument is_parallel. is_parallel logical variable specifies whether computation performed using parallel processing. default value FALSE. verbose binary variable determines whether detailed information steps estimation MPIN model displayed. output produced verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/mpin_ml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MPIN model estimation via standard ML methods — mpin_ml","text":"Returns object class estimate.mpin","code":""},{"path":"https://www.pinstimation.com/reference/mpin_ml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MPIN model estimation via standard ML methods — mpin_ml","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored.","code":""},{"path":"https://www.pinstimation.com/reference/mpin_ml.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MPIN model estimation via standard ML methods — mpin_ml","text":"Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420. Ersan O, Alici (2016). “unbiased computation methodology estimating probability informed trading (PIN).” Journal International Financial Markets, Institutions Money, 43, 74--94. ISSN 10424431. Ersan O, Ghachem M (2022a). “Identifying information types probability informed trading (PIN) models: improved algorithm.” Available SSRN 4117956. Ghachem M, Ersan O (2022a). “Estimation probability informed trading models via expectation-conditional maximization algorithm.” Available SSRN 4117952.","code":""},{"path":"https://www.pinstimation.com/reference/mpin_ml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MPIN model estimation via standard ML methods — mpin_ml","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # ------------------------------------------------------------------------ # # Estimate MPIN model using the standard ML method                         # # ------------------------------------------------------------------------ #  # Estimate the MPIN model using mpin_ml() assuming that there is a single # information layer in the data. The model is then equivalent to the PIN # model. The argument 'layers' takes the value '1'. # We use two extra clusters to generate the initial parameter sets.  estimate <- mpin_ml(xdata, layers = 1, xtraclusters = 2, verbose = FALSE)  # Show the estimation output  show(estimate) #> ---------------------------------- #> MPIN estimation completed successfully #> ---------------------------------- #> Likelihood factorization: Ersan (2016) #> Estimation Algorithm \t: Maximum Likelihood Estimation #> Initial parameter sets\t: Ersan (2016), Ersan and Alici (2016) #> Info. layers in the data: provided by the user #> ---------------------------------- #> 3 initial set(s) are used in the estimation  #> Type object@initialsets to see the initial parameter sets used #>  #>  MPIN model   Sequential   #>  #>  #> ==========  =========== #> Variables   Estimates   #> ==========  =========== #> alpha       0.749997    #> delta       0.133334    #> mu          1193.52     #> eps.b       357.27      #> eps.s       328.63      #> ----                    #> Likelihood  (3226.469)  #> mpin(j)     0.566172    #> mpin        0.566172    #> ==========  =========== #>  #> ------- #> Running time: 1.155 seconds  # Estimate the MPIN model using the function mpin_ml(), without specifying # the number of layers. The number of layers is then detected using Ersan and # Ghachem (2022a). # ------------------------------------------------------------- # \\donttest{ estimate <- mpin_ml(xdata, xtraclusters = 2, verbose = FALSE) # } # Show the estimation output  show(estimate) #> ---------------------------------- #> MPIN estimation completed successfully #> ---------------------------------- #> Likelihood factorization: Ersan (2016) #> Estimation Algorithm \t: Maximum Likelihood Estimation #> Initial parameter sets\t: Ersan (2016), Ersan and Alici (2016) #> Info. layers detected\t: using Ersan and Ghachem (2022a) #> ---------------------------------- #> 10 initial set(s) are used in the estimation  #> Type object@initialsets to see the initial parameter sets used #>  #>  MPIN model   Sequential   #>  #>  #> ==========  ============================ #> Variables   Estimates                    #> ==========  ============================ #> alpha       0.216664, 0.050001, 0.483339 #> delta       0.230769, 0.666673, 0.034481 #> mu          602.86, 986.44, 1506.81      #> eps.b       336.91                       #> eps.s       335.89                       #> ----                                     #> Likelihood  (643.458)                    #> mpin(j)     0.082615, 0.031196, 0.460647 #> mpin        0.574458                     #> ==========  ============================ #>  #> ------- #> Running time: 9.859 seconds  # Display the likelihood-maximizing parameters  show(estimate@parameters) #> $alpha #>   layer.1   layer.2   layer.3  #> 0.2166640 0.0500008 0.4833392  #>  #> $delta #>    layer.1    layer.2    layer.3  #> 0.23076940 0.66667315 0.03448076  #>  #> $mu #>   layer.1   layer.2   layer.3  #>  602.8611  986.4359 1506.8130  #>  #> $eps.b #> [1] 336.9118 #>  #> $eps.s #> [1] 335.8871 #>   # Display the global multilayer probability of informed trading  show(estimate@mpin) #> [1] 0.5744584  # Display the multilayer probabilities of informed trading per layer  show(estimate@mpinJ) #>    layer.1    layer.2    layer.3  #> 0.08261535 0.03119626 0.46064683   # Display the first five initial parameters sets used in the maximum # likelihood estimation  show(round(head(estimate@initialsets, 5), 4)) #>   alpha.1 alpha.2 alpha.3 delta.1 delta.2 delta.3     mu.1      mu.2     mu.3 #> 1  0.1167  0.1000  0.5333  0.2857  0.1667  0.0938 561.0181  644.3616 1462.722 #> 2  0.1167  0.1500  0.4833  0.2857  0.3333  0.0345 561.0181  762.2363 1510.798 #> 3  0.1167  0.5333  0.1000  0.2857  0.1250  0.0000 561.0181 1286.9692 1581.709 #> 4  0.2167  0.0500  0.4833  0.2308  0.6667  0.0345 599.4843  997.9859 1510.798 #> 5  0.2167  0.4333  0.1000  0.2308  0.1154  0.0000 599.4843 1435.2633 1581.709 #>      eps.b    eps.s #> 1 336.1429 336.1852 #> 2 336.1429 336.1852 #> 3 336.1429 336.1852 #> 4 336.1429 336.1852 #> 5 336.1429 336.1852"},{"path":"https://www.pinstimation.com/reference/pin.html","id":null,"dir":"Reference","previous_headings":"","what":"PIN estimation - custom initial parameter sets — pin","title":"PIN estimation - custom initial parameter sets — pin","text":"Estimates Probability Informed Trading (PIN) using custom initial parameter sets","code":""},{"path":"https://www.pinstimation.com/reference/pin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PIN estimation - custom initial parameter sets — pin","text":"","code":"pin(data, initialsets, factorization = \"E\", verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/pin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PIN estimation - custom initial parameter sets — pin","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). initialsets dataframe following variables order (\\(\\alpha\\), \\(\\delta\\), \\(\\mu\\), \\(\\epsilon\\)b, \\(\\epsilon\\)s). factorization character string {\"EHO\", \"LK\", \"E\", \"NONE\"} referring given factorization. default value set \"E\". verbose binary variable determines whether detailed information steps estimation PIN model displayed. output produced verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/pin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PIN estimation - custom initial parameter sets — pin","text":"Returns object class estimate.pin","code":""},{"path":"https://www.pinstimation.com/reference/pin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PIN estimation - custom initial parameter sets — pin","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored. factorization variable takes one four values: \"EHO\" refers factorization Easley et al. (2010) \"LK\"  refers factorization Lin Ke (2011) \"E\"  refers factorization Ersan (2016) \"NONE\" refers original likelihood function - factorization","code":""},{"path":"https://www.pinstimation.com/reference/pin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PIN estimation - custom initial parameter sets — pin","text":"Easley D, Hvidkjaer S, Ohara M (2010). “Factoring information returns.” Journal Financial Quantitative Analysis, 45(2), 293--309. ISSN 00221090. Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420. Lin H, Ke W (2011). “computing bias estimating probability informed trading.” Journal Financial Markets, 14(4), 625-640. ISSN 1386-4181.","code":""},{"path":"https://www.pinstimation.com/reference/pin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PIN estimation - custom initial parameter sets — pin","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  #-------------------------------------------------------------- # Using generic function pin() #--------------------------------------------------------------  # Define initial parameters: # initialset = (alpha, delta, mu, eps.b, eps.s)  initialset <- c(0.3, 0.1, 800, 300, 200)  # Estimate the PIN model using the factorization of the PIN likelihood # function by Ersan (2006)  estimate <- pin(xdata, initialsets = initialset, verbose = FALSE)  # Display the estimated PIN value  show(estimate@pin) #> [1] 0.5661728  # Display the estimated parameters  show(estimate@parameters) #>        alpha        delta           mu        eps.b        eps.s  #>    0.7499996    0.1333280 1193.5176276  357.2656584  328.6292445   # Store the initial parameter sets used for MLE in a dataframe variable, # and display its first five rows  initialsets <- estimate@initialsets show(head(initialsets, 5)) #>   alpha delta  mu eps.b eps.s #> 1   0.3   0.1 800   300   200"},{"path":"https://www.pinstimation.com/reference/PINstimation-package.html","id":null,"dir":"Reference","previous_headings":"","what":"An R package for estimating the probability of informed trading — PINstimation-package","title":"An R package for estimating the probability of informed trading — PINstimation-package","text":"package provides utilities estimation probability informed trading measures: original PIN (PIN) introduced Easley Ohara (1992)  Easley et al. (1996)  , multilayer PIN (MPIN) introduced Ersan (2016) , adjusted PIN (AdjPIN) model introduced Duarte Young (2009) , volume-synchronized PIN (VPIN) introduced Easley et al. (2011)  Easley et al. (2012) . Estimations PIN, MPIN, adjPIN subject floating-point exception error, sensitive choice initial values. Therefore, researchers developed factorizations model likelihood functions well algorithms determining initial parameter sets maximum likelihood estimation - (MLE henceforth).  factorizations, package includes three different factorizations PIN likelihood function :fact_pin_eho() Easley et al. (2010) , fact_pin_lk() Lin Ke (2011) , fact_pin_e() Ersan (2016) ; one factorization MPIN likelihood function: fact_mpin() Ersan (2016) ; one factorization AdjPIN likelihood function: fact_adjpin() Ersan Ghachem (2022b) .  package implements three algorithms generate initial parameter sets MLE PIN model : initials_pin_yz() algorithm Yan Zhang (2012) , initials_pin_gwj() algorithm Gan et al. (2015) , initials_pin_ea() algorithm Ersan Alici (2016) . initial parameter sets MLE MPIN model, function initials_mpin() implements multilayer extension algorithm Ersan Alici (2016) . Finally, three functions implement three algorithms initial parameter sets MLE AdjPIN model, namely initials_adjpin() algorithm Ersan Ghachem (2022b) , initials_adjpin_cl() algorithm Cheng Lai (2021) ; initials_adjpin_rnd() randomly generated initial parameter sets. choice initial parameter sets can done directly, either using specific functions implementing MLE PIN model, , pin_yz(), pin_gwj(), pin_ea(); argument initialsets generic functions implementing MLE MPIN AdjPIN models, namely mpin_ml(), adjpin(). Besides, PIN, MPIN AdjPIN models can estimated using custom initial parameter set(s) provided user fed argument initialsets functions pin(), mpin_ml() adjpin(). function get_posteriors(), package also allows users assign, day sample, posterior probability day -information day, good-information day bad-information day.  alternative standard maximum likelihood estimation, estimation via expectation conditional maximization algorithm (ECM) suggested Ghachem Ersan (2022a) , implemented function mpin_ecm() MPIN model, function adjpin() AdjPIN model.  Dataset(s) daily aggregated numbers buys sells user determined number information layers can simulated function generatedata_mpin() MPIN (PIN) model; generatedata_adjpin() AdjPIN model. output functions contains theoretical parameters used data generation, empirical parameters computed generated data, alongside generated data . Data simulation functions allow broad customization produce data fit user's preferences. Therefore, simulated data series can utilized comparative analyses applied methods different scenarios. Alternatively, user can use two example datasets preloaded package: dailytrades representative quarterly trade data daily buys sells; hfdata simulated high-frequency dataset comprising 100 000 trades.  Finally, package provides two functions deal high-frequency data. First, function vpin() estimates provides detailed output order flow toxicity metric, volume-synchronized probability informed trading, developed Easley et al. (2011)  Easley et al. (2012) . Second, function aggregate_trades() aggregates high-frequency trade-data daily data using several trade classification algorithms, namely tick algorithm, quote algorithm, LR algorithm (Lee Ready 1991)  EMO algorithm (Ellis et al. 2000) .  package provides fast, compact, precise utilities tackle sophisticated, error-prone, time-consuming estimation procedure informed trading, solely using raw trade-level data. Ghachem Ersan (2022b)  provides comprehensive overview package: first details underlying theoretical background, provides thorough description functions, using tackle relevant research questions.","code":""},{"path":"https://www.pinstimation.com/reference/PINstimation-package.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"An R package for estimating the probability of informed trading — PINstimation-package","text":"adjpin estimates adjusted probability informed trading (AdjPIN) model Duarte Young (2009) . aggregate_trades aggregates trading data per day using different trade classification algorithms. detectlayers_e detects number information layers present trade-data using algorithm Ersan (2016) . detectlayers_eg detects number information layers present trade-data using algorithm Ersan Ghachem (2022a) . detectlayers_ecm detects number information layers present trade-data using expectation-conditional maximization algorithm Ghachem Ersan (2022a) . fact_adjpin returns AdjPIN factorization likelihood function Ersan Ghachem (2022b)  evaluated provided data parameter sets. fact_pin_e returns PIN factorization likelihood function Ersan (2016)  evaluated provided data parameter sets. fact_pin_eho returns PIN factorization likelihood function Easley et al. (2010)  evaluated provided data parameter sets. fact_pin_lk returns PIN factorization likelihood function Lin Ke (2011)  evaluated provided data parameter sets. fact_mpin returns MPIN factorization likelihood function Ersan (2016)  evaluated provided data parameter sets. generatedata_adjpin generates dataset object list dataset objects generated according assumptions AdjPIN model. generatedata_mpin generates dataset object list dataset objects generated according assumptions MPIN model. get_posteriors computes, day sample, posterior probabilities -information day, good-information day bad-information day respectively. initials_adjpin generates initial parameter sets ML/ECM estimation adjusted probability informed trading using algorithm Ersan Ghachem (2022b) . initials_adjpin_cl generates initial parameter sets ML/ECM estimation adjusted probability informed trading using extension algorithm Cheng Lai (2021) . initials_adjpin_rnd generates random parameter sets estimation AdjPIN model. initials_mpin generates initial parameter sets maximum likelihood estimation multilayer probability informed trading (MPIN) using Ersan (2016)  generalization algorithm Ersan Alici (2016) . initials_pin_ea generates initial parameter sets maximum likelihood estimation probability informed trading (PIN) using algorithm Ersan Alici (2016) . initials_pin_gwj generates initial parameter set maximum likelihood estimation probability informed trading (PIN) using algorithm Gan et al. (2015) . initials_pin_yz generates initial parameter sets maximum likelihood estimation probability informed trading (PIN) using algorithm Yan Zhang (2012) . mpin_ecm estimates multilayer probability informed trading (MPIN) using expectation-conditional maximization algorithm (ECM) Ghachem Ersan (2022a) . mpin_ml estimates multilayer probability informed trading (MPIN) using layer detection algorithms Ersan (2016) , Ersan Ghachem (2022a) ; standard maximum likelihood estimation. pin estimates probability informed trading (PIN) using custom initial parameter set(s) provided user. pin_ea estimates probability informed trading (PIN) using initial parameter sets algorithm Ersan Alici (2016) . pin_gwj estimates probability informed trading (PIN) using initial parameter set algorithm Gan et al. (2015) . pin_yz estimates probability informed trading (PIN) using initial parameter sets grid-search algorithm Yan Zhang (2012) . vpin estimates volume-synchronized probability informed trading (VPIN).","code":""},{"path":"https://www.pinstimation.com/reference/PINstimation-package.html","id":"datasets","dir":"Reference","previous_headings":"","what":"Datasets","title":"An R package for estimating the probability of informed trading — PINstimation-package","text":"dailytrades dataframe representative quarterly (60 trading days) data simulated daily buys sells. hfdata dataframe containing simulated high-frequency trade-data 100 000 timestamps variables {timestamp, price, volume, bid, ask}.","code":""},{"path":"https://www.pinstimation.com/reference/PINstimation-package.html","id":"estimation-results","dir":"Reference","previous_headings":"","what":"Estimation results","title":"An R package for estimating the probability of informed trading — PINstimation-package","text":"estimate.adjpin-class class estimate.adjpin stores estimation results function adjpin(). estimate.mpin-class class estimate.mpin stores estimation results MPIN model estimated function mpin_ml(). estimate.mpin.ecm-class class estimate.mpin.ecm stores estimation results MPIN model estimated function mpin_ecm(). estimate.pin-class class estimate.pin stores estimation results following PIN functions: pin(), pin_yz(),   pin_gwj(), pin_ea(). estimate.vpin-class class estimate.vpin stores estimation results VPIN model using function vpin().","code":""},{"path":"https://www.pinstimation.com/reference/PINstimation-package.html","id":"data-simulation","dir":"Reference","previous_headings":"","what":"Data simulation","title":"An R package for estimating the probability of informed trading — PINstimation-package","text":"dataset-class class dataset stores result simulation aggregate daily trading data. data.series-class class data.series stores list dataset.","code":""},{"path":"https://www.pinstimation.com/reference/PINstimation-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An R package for estimating the probability of informed trading — PINstimation-package","text":"Cheng T, Lai H (2021). “Improvements estimating probability informed trading models.” Quantitative Finance, 21(5), 771-796. Duarte J, Young L (2009). “PIN priced?” Journal Financial Economics, 91(2), 119--138. ISSN 0304405X. Easley D, De Prado MML, Ohara M (2011). “microstructure \\\"flash crash\\\": flow toxicity, liquidity crashes, probability informed trading.” Journal Portfolio Management, 37(2), 118--128. Easley D, Hvidkjaer S, Ohara M (2010). “Factoring information returns.” Journal Financial Quantitative Analysis, 45(2), 293--309. ISSN 00221090. Easley D, Kiefer NM, Ohara M, Paperman JB (1996). “Liquidity, information, infrequently traded stocks.” Journal Finance, 51(4), 1405--1436. ISSN 00221082. Easley D, Lopez De Prado MM, OHara M (2012). “Flow toxicity liquidity high-frequency world.” Review Financial Studies, 25(5), 1457--1493. ISSN 08939454. Easley D, Ohara M (1992). “Time Process Security Price Adjustment.” Journal Finance, 47(2), 577--605. ISSN 15406261. Ellis K, Michaely R, Ohara M (2000). “Accuracy Trade Classification Rules: Evidence Nasdaq.” Journal Financial Quantitative Analysis, 35(4), 529--551. Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420. Ersan O, Alici (2016). “unbiased computation methodology estimating probability informed trading (PIN).” Journal International Financial Markets, Institutions Money, 43, 74--94. ISSN 10424431. Ersan O, Ghachem M (2022a). “Identifying information types probability informed trading (PIN) models: improved algorithm.” Available SSRN 4117956. Ersan O, Ghachem M (2022b). “methodological approach computational problems estimation adjusted PIN model.” Available SSRN 4117954. Gan Q, Wei WC, Johnstone D (2015). “faster estimation method probability informed trading using hierarchical agglomerative clustering.” Quantitative Finance, 15(11), 1805--1821. Ghachem M, Ersan O (2022a). “Estimation probability informed trading models via expectation-conditional maximization algorithm.” Available SSRN 4117952. Ghachem M, Ersan O (2022b). “PINstimation: R package estimating models probability informed trading.” Available SSRN 4117946. Lee CMC, Ready MJ (1991). “Inferring Trade Direction Intraday Data.” Journal Finance, 46(2), 733--746. ISSN 00221082, 15406261. Lin H, Ke W (2011). “computing bias estimating probability informed trading.” Journal Financial Markets, 14(4), 625-640. ISSN 1386-4181. Yan Y, Zhang S (2012). “improved estimation method empirical properties probability informed trading.” Journal Banking Finance, 36(2), 454--467. ISSN 03784266.","code":""},{"path":"https://www.pinstimation.com/reference/PINstimation-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An R package for estimating the probability of informed trading — PINstimation-package","text":"Montasser Ghachem montasser.ghachem@pinstimation.com  Department Economics Stockholm University, Stockholm, Sweden. Oguz Ersan oguz.ersan@pinstimation.com  Department International Trade Finance Kadir University, Istanbul, Turkey.","code":""},{"path":"https://www.pinstimation.com/reference/pin_ea.html","id":null,"dir":"Reference","previous_headings":"","what":"PIN estimation - initial parameter sets of Ersan & Alici (2016) — pin_ea","title":"PIN estimation - initial parameter sets of Ersan & Alici (2016) — pin_ea","text":"Estimates Probability Informed Trading (PIN) using initial sets algorithm Ersan Alici (2016) .","code":""},{"path":"https://www.pinstimation.com/reference/pin_ea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PIN estimation - initial parameter sets of Ersan & Alici (2016) — pin_ea","text":"","code":"pin_ea(data, factorization, xtraclusters = 4, verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/pin_ea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PIN estimation - initial parameter sets of Ersan & Alici (2016) — pin_ea","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). factorization character string {\"E\", \"EHO\", \"LK\", \"NONE\"} referring given factorization. default value \"E\". xtraclusters integer used divide trading days #(2 + xtraclusters) clusters, thereby resulting #comb(1 + xtraclusters, 1) initial parameter sets line Ersan Alici (2016) . default value 4. verbose binary variable determines whether detailed information steps estimation PIN model displayed. output produced verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/pin_ea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PIN estimation - initial parameter sets of Ersan & Alici (2016) — pin_ea","text":"Returns object class estimate.pin","code":""},{"path":"https://www.pinstimation.com/reference/pin_ea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PIN estimation - initial parameter sets of Ersan & Alici (2016) — pin_ea","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored. factorization variable takes one four values: \"EHO\" refers factorization Easley et al. (2010) \"LK\"  refers factorization Lin Ke (2011) \"E\"  refers factorization Ersan (2016) \"NONE\" refers original likelihood function - factorization function pin_ea() implements algorithm detailed Ersan Alici (2016) . higher number additional layers (xtraclusters), better estimation. Ersan Alici (2016) , however, shown benefit increasing number beyond 5 marginal, statistically insignificant. function initials_pin_ea() provides initial parameter sets obtained implementation Ersan Alici (2016)  algorithm. information initial parameter set determination, see initials_pin_ea().","code":""},{"path":"https://www.pinstimation.com/reference/pin_ea.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PIN estimation - initial parameter sets of Ersan & Alici (2016) — pin_ea","text":"Easley D, Hvidkjaer S, Ohara M (2010). “Factoring information returns.” Journal Financial Quantitative Analysis, 45(2), 293--309. ISSN 00221090. Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420. Ersan O, Alici (2016). “unbiased computation methodology estimating probability informed trading (PIN).” Journal International Financial Markets, Institutions Money, 43, 74--94. ISSN 10424431. Lin H, Ke W (2011). “computing bias estimating probability informed trading.” Journal Financial Markets, 14(4), 625-640. ISSN 1386-4181.","code":""},{"path":"https://www.pinstimation.com/reference/pin_ea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PIN estimation - initial parameter sets of Ersan & Alici (2016) — pin_ea","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # Estimate the PIN model using the factorization of Ersan (2016), and initial # parameter sets generated using the algorithm of Ersan and Alici (2016). # The argument xtraclusters is omitted so will take its default value 4.  estimate <- pin_ea(xdata, verbose = FALSE)  # Display the estimated PIN value  show(estimate@pin) #> [1] 0.5661721  # Display the estimated parameters  show(estimate@parameters) #>        alpha        delta           mu        eps.b        eps.s  #>    0.7499975    0.1333342 1193.5179655  357.2659099  328.6291793   # Store the initial parameter sets used for MLE in a dataframe variable, # and display its first five rows  initialsets <- estimate@initialsets show(head(initialsets, 5)) #>       alpha      delta        mu     eps.b    eps.s #> 1 0.7500000 0.13333333 1213.3422  336.1429 336.1852 #> 2 0.6333333 0.10526316 1262.0469  446.8846 356.4107 #> 3 0.5333333 0.09375000 1329.2577  531.6774 367.4561 #> 4 0.4833333 0.03448276 1364.5773  556.6875 399.6780 #> 5 0.1000000 0.00000000  928.7648 1076.1852 423.2833"},{"path":"https://www.pinstimation.com/reference/pin_gwj.html","id":null,"dir":"Reference","previous_headings":"","what":"PIN estimation - initial parameter set of Gan et al. (2015) — pin_gwj","title":"PIN estimation - initial parameter set of Gan et al. (2015) — pin_gwj","text":"Estimates Probability Informed Trading (PIN) using initial set algorithm Gan et al.(2015).","code":""},{"path":"https://www.pinstimation.com/reference/pin_gwj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PIN estimation - initial parameter set of Gan et al. (2015) — pin_gwj","text":"","code":"pin_gwj(data, factorization = \"E\", verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/pin_gwj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PIN estimation - initial parameter set of Gan et al. (2015) — pin_gwj","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). factorization character string {\"EHO\", \"LK\", \"E\", \"NONE\"} referring given factorization. default value set \"E\". verbose binary variable determines whether detailed information steps estimation PIN model displayed. output produced verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/pin_gwj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PIN estimation - initial parameter set of Gan et al. (2015) — pin_gwj","text":"Returns object class estimate.pin","code":""},{"path":"https://www.pinstimation.com/reference/pin_gwj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PIN estimation - initial parameter set of Gan et al. (2015) — pin_gwj","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored. factorization variable takes one four values: \"EHO\" refers factorization Easley et al. (2010) \"LK\"  refers factorization Lin Ke (2011) \"E\"  refers factorization Ersan (2016) \"NONE\" refers original likelihood function - factorization function pin_gwj() implements algorithm detailed Gan et al. (2015) . can use function initials_pin_gwj() order get initial parameter set.","code":""},{"path":"https://www.pinstimation.com/reference/pin_gwj.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PIN estimation - initial parameter set of Gan et al. (2015) — pin_gwj","text":"Easley D, Hvidkjaer S, Ohara M (2010). “Factoring information returns.” Journal Financial Quantitative Analysis, 45(2), 293--309. ISSN 00221090. Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420. Gan Q, Wei WC, Johnstone D (2015). “faster estimation method probability informed trading using hierarchical agglomerative clustering.” Quantitative Finance, 15(11), 1805--1821. Lin H, Ke W (2011). “computing bias estimating probability informed trading.” Journal Financial Markets, 14(4), 625-640. ISSN 1386-4181.","code":""},{"path":"https://www.pinstimation.com/reference/pin_gwj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PIN estimation - initial parameter set of Gan et al. (2015) — pin_gwj","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # Estimate the PIN model using the factorization of Ersan (2016), and initial # parameter sets generated using the algorithm of Gan et al. (2015). # The argument xtraclusters is omitted so will take its default value 4.  estimate <- pin_gwj(xdata, verbose = FALSE)  # Display the estimated PIN value  show(estimate@pin) #> [1] 0.4417375  # Display the estimated parameters  show(estimate@parameters) #>        alpha        delta           mu        eps.b        eps.s  #>    0.5833376    0.1714269 1197.2546207  554.0730552  328.5610583   # Store the initial parameter sets used for MLE in a dataframe variable, # and display its first five rows  initialsets <- estimate@initialsets show(head(initialsets, 5)) #>       alpha     delta       mu    eps.b    eps.s #> 1 0.5666667 0.1764706 1214.401 556.6875 336.1852"},{"path":"https://www.pinstimation.com/reference/pin_yz.html","id":null,"dir":"Reference","previous_headings":"","what":"PIN estimation - initial parameter sets of Yan & Zhang (2012) — pin_yz","title":"PIN estimation - initial parameter sets of Yan & Zhang (2012) — pin_yz","text":"Estimates Probability Informed Trading (PIN) using initial parameter sets generated using grid search algorithm Yan Zhang (2012).","code":""},{"path":"https://www.pinstimation.com/reference/pin_yz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PIN estimation - initial parameter sets of Yan & Zhang (2012) — pin_yz","text":"","code":"pin_yz(data, factorization, ea_correction = FALSE, grid_size = 5,                                                   verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/pin_yz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PIN estimation - initial parameter sets of Yan & Zhang (2012) — pin_yz","text":"data dataframe 2 variables: first corresponds buyer-initiated trades (buys), second corresponds seller-initiated trades (sells). factorization character string {\"EHO\", \"LK\", \"E\", \"NONE\"} referring given factorization. default value \"E\". ea_correction binary variable determining whether modifications algorithm Yan Zhang (2012)  suggested Ersan Alici (2016)  implemented. default value FALSE. grid_size integer 1, 20; representing size grid. default value 5. See details. verbose binary variable determines whether detailed information steps estimation PIN model displayed. output produced verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/pin_yz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PIN estimation - initial parameter sets of Yan & Zhang (2012) — pin_yz","text":"Returns object class estimate.pin","code":""},{"path":"https://www.pinstimation.com/reference/pin_yz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PIN estimation - initial parameter sets of Yan & Zhang (2012) — pin_yz","text":"argument 'data' numeric dataframe, contain least two variables. first two variables considered: first variable assumed correspond total number buyer-initiated trades, second variable assumed correspond total number seller-initiated trades. row observation correspond trading day. NA values ignored. factorization variable takes one four values: \"EHO\" refers factorization Easley et al. (2010) \"LK\"  refers factorization Lin Ke (2011) \"E\"  refers factorization Ersan (2016) \"NONE\" refers original likelihood function - factorization argument grid_size determines size grid variables: alpha, delta, eps.b. grid_size set given value m, algorithm creates sequence starting 1/2m, ending 1 - 1/2m, step 1/m. default value 5 corresponds size grid Yan Zhang (2012) . case, sequence starts 0.1 = 1/(2 x 5), ends 0.9 = 1 - 1/(2 x 5) step 0.2 = 1/m. function pin_yz() implements, default, original Yan Zhang (2012)  algorithm default value ea_correction takes value FALSE. value ea_correction set TRUE; , sets irrelevant mu values excluded, sets boundary values reintegrated initial parameter sets.","code":""},{"path":"https://www.pinstimation.com/reference/pin_yz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PIN estimation - initial parameter sets of Yan & Zhang (2012) — pin_yz","text":"Easley D, Hvidkjaer S, Ohara M (2010). “Factoring information returns.” Journal Financial Quantitative Analysis, 45(2), 293--309. ISSN 00221090. Ersan O (2016). “Multilayer Probability Informed Trading.” Available SSRN 2874420. Ersan O, Alici (2016). “unbiased computation methodology estimating probability informed trading (PIN).” Journal International Financial Markets, Institutions Money, 43, 74--94. ISSN 10424431. Lin H, Ke W (2011). “computing bias estimating probability informed trading.” Journal Financial Markets, 14(4), 625-640. ISSN 1386-4181. Yan Y, Zhang S (2012). “improved estimation method empirical properties probability informed trading.” Journal Banking Finance, 36(2), 454--467. ISSN 03784266.","code":""},{"path":"https://www.pinstimation.com/reference/pin_yz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PIN estimation - initial parameter sets of Yan & Zhang (2012) — pin_yz","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # Estimate the PIN model using the factorization of Lin and Ke(2011), and # initial parameter sets generated using the algorithm of Yan & Zhang (2012). # In contrast to the original algorithm, we set the grid size for the grid # search algorithm at 3. The original algorithm assumes a grid of size 5.  estimate <- pin_yz(xdata, \"LK\", grid_size = 3, verbose = FALSE)  # Display the estimated PIN value  show(estimate@pin) #> [1] 0.5661739  # Display the estimated parameters  show(estimate@parameters) #>        alpha        delta           mu        eps.b        eps.s  #>    0.7500022    0.1333345 1193.5176294  357.2654069  328.6290139   # Store the initial parameter sets used for MLE in a dataframe variable, # and display its first five rows  initialsets <- estimate@initialsets show(head(initialsets, 5)) #>       alpha     delta     mu    eps.b    eps.s #> 1 0.1666667 0.1666667 6946.5 192.9583 230.3250 #> 2 0.5000000 0.1666667 2315.5 192.9583 230.3250 #> 3 0.8333333 0.1666667 1389.3 192.9583 230.3250 #> 4 0.1666667 0.1666667 4167.9 578.8750 307.5083 #> 5 0.5000000 0.1666667 1389.3 578.8750 307.5083"},{"path":"https://www.pinstimation.com/reference/set_display_digits.html","id":null,"dir":"Reference","previous_headings":"","what":"Package-wide number of digits — set_display_digits","title":"Package-wide number of digits — set_display_digits","text":"Sets number digits display output different package functions.","code":""},{"path":"https://www.pinstimation.com/reference/set_display_digits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package-wide number of digits — set_display_digits","text":"","code":"set_display_digits(digits = list())"},{"path":"https://www.pinstimation.com/reference/set_display_digits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package-wide number of digits — set_display_digits","text":"digits list numbers corresponding different display digits. default value list().","code":""},{"path":"https://www.pinstimation.com/reference/set_display_digits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Package-wide number of digits — set_display_digits","text":"parameter digits named list. containing: d1: contains number display digits values probability estimates \\(\\alpha\\), \\(\\delta\\), pin, mpin, mpin(j), adjpin, psos, \\(\\theta\\), \\(\\theta'\\). d2: contains number display digits values \\(\\mu\\), \\(\\epsilon\\)b \\(\\epsilon\\)s, well information criteria: AIC, BIC, AWE. d3: contains number display digits remaining values vpin statistics likelihood value . function called arguments, display digits reset default values, .e., list(d1 = 6, d2 = 2, d3 = 3)). argument digits omitted, function accept list containing exactly three numerical values, ranging 0 10. list can named unnamed. numbers argument digits integers, rounded.","code":""},{"path":"https://www.pinstimation.com/reference/set_display_digits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Package-wide number of digits — set_display_digits","text":"","code":"# There is a preloaded quarterly dataset called 'dailytrades' with 60 # observations. Each observation corresponds to a day and contains the # total number of buyer-initiated trades ('B') and seller-initiated # trades ('S') on that day. To know more, type ?dailytrades  xdata <- dailytrades  # We show the output of the function pin_ea() using the default values # of display digits. We then change these values using the function # set_display_digits(), before displaying the same estimate.pin object # again to see the difference.  model <- pin_ea(xdata, verbose = FALSE) show(model) #> ---------------------------------- #> PIN estimation completed successfully #> ---------------------------------- #> Initial parameter sets\t: Ersan and Alici (2016) #> Likelihood factorization: Ersan (2016) #> ---------------------------------- #> 5 initial set(s) are used in the estimation  #> Type object@initialsets to see the initial parameter sets used #>  #>  PIN model   #>  #> ==========  =========== #> Variables   Estimates   #> ==========  =========== #> alpha       0.749997    #> delta       0.133334    #> mu          1193.52     #> eps.b       357.27      #> eps.s       328.63      #> ----                    #> Likelihood  (3226.469)  #> PIN         0.566172    #> ==========  =========== #>  #> ------- #> Running time: 1.084 seconds  # Change the number of digits for d1 to 3, of d2 to 0 and of d3 to 2  set_display_digits(list(3, 0, 2)) #> Display digits updated successfully!  # No need to run the function mpin_ml() again to update the display of an # estimate.mpin object.This holds for all estimate* S4 objects.  show(model) #> ---------------------------------- #> PIN estimation completed successfully #> ---------------------------------- #> Initial parameter sets\t: Ersan and Alici (2016) #> Likelihood factorization: Ersan (2016) #> ---------------------------------- #> 5 initial set(s) are used in the estimation  #> Type object@initialsets to see the initial parameter sets used #>  #>  PIN model   #>  #> ==========  =========== #> Variables   Estimates   #> ==========  =========== #> alpha       0.75        #> delta       0.133       #> mu          1194        #> eps.b       357         #> eps.s       329         #> ----                    #> Likelihood  (3226.47)   #> PIN         0.566       #> ==========  =========== #>  #> ------- #> Running time: 1.084 seconds"},{"path":"https://www.pinstimation.com/reference/vpin.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of Volume-Synchronized PIN model — vpin","title":"Estimation of Volume-Synchronized PIN model — vpin","text":"Estimates Volume-Synchronized Probability Informed Trading developed Easley et al. (2011)  Easley et al. (2012) .","code":""},{"path":"https://www.pinstimation.com/reference/vpin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of Volume-Synchronized PIN model — vpin","text":"","code":"vpin(data, timebarsize = 60, buckets = 50, samplength = 50,             tradinghours = 24, verbose = TRUE)"},{"path":"https://www.pinstimation.com/reference/vpin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of Volume-Synchronized PIN model — vpin","text":"data dataframe 3 variables: {timestamp, price, volume}. timebarsize integer referring  size timebars seconds. default value 60. buckets integer referring number buckets daily average volume. default value 50. samplength integer referring sample length window size used calculate VPIN vector. default value 50. tradinghours integer referring length daily trading sessions hours. default value 24. verbose binary variable determines whether detailed information steps estimation VPIN model displayed. output produced verbose set FALSE. default value TRUE.","code":""},{"path":"https://www.pinstimation.com/reference/vpin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of Volume-Synchronized PIN model — vpin","text":"Returns object class estimate.vpin.","code":""},{"path":"https://www.pinstimation.com/reference/vpin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimation of Volume-Synchronized PIN model — vpin","text":"dataframe data contain least three variables. first three variables considered following order {timestamp, price, volume}. property @bucketdata created Abad Yague (2012) . argument timebarsize seconds enabling user implement shorter 1 minute intervals. default value set 1 minute (60 seconds) following Easley et al. (2011, 2012). parameter tradinghours used eventually correct duration per bucket. duration given bucket difference timestamp last trade endtime timestamp first trade stime bucket. first trade last trade bucket occur two different days, market trading session cover full day (24 hours); duration bucket inflated. Assume daily trading session 8 hours (tradinghours=8), start time bucket 2018-10-12 17:06:40 end time 2018-10-13 09:36:00. straightforward calculation gives duration bucket 59,360 secs. However, duration includes time market closed (16 hours). corrected duration takes consideration time market activity: duration=59,360-16*3600= 1760 secs, .e., 30 minutes.","code":""},{"path":"https://www.pinstimation.com/reference/vpin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimation of Volume-Synchronized PIN model — vpin","text":"Abad D, Yague J (2012). “PIN VPIN: introduction order flow toxicity.” Spanish Review Financial Economics, 10(2), 74--83. Easley D, De Prado MML, Ohara M (2011). “microstructure \\\"flash crash\\\": flow toxicity, liquidity crashes, probability informed trading.” Journal Portfolio Management, 37(2), 118--128. Easley D, Lopez De Prado MM, OHara M (2012). “Flow toxicity liquidity high-frequency world.” Review Financial Studies, 25(5), 1457--1493. ISSN 08939454.","code":""},{"path":"https://www.pinstimation.com/reference/vpin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of Volume-Synchronized PIN model — vpin","text":"","code":"# There is a preloaded dataset called 'hfdata' contained in the package. # It is an artificially created high-frequency trading data. The dataset # contains 100 000 trades and five variables 'timestamp', 'price', # 'volume', 'bid' and 'ask'. For more information, type ?hfdata.  xdata <- hfdata  # Estimate VPIN model, using the following parameter set where the time # bar size is 5 minutes, i.e., 300 seconds (timebarsize = 300), 50 # buckets per average daily volume (buckets = 50), and a window size of # 250 for the VPIN calculation (samplength = 250).  estimate <- vpin(xdata, timebarsize = 300, buckets = 50, samplength = 250) #> [+] VPIN Estimation started. #>   |-[1] Checking and preparing the data... #>   |-[2] Creating 300-second timebars... #>   |-[3] Calculating Volume Bucket Size (VBS) and Sigma(DP)... #>   |-[4] Breaking up large 300-second timebars' volume... #>   |-[5] Assigning 300-second timebars into buckets... #>   |-[6] Balancing timebars and adjusting bucket sizes to VBS... #>   |-[7] Calculating aggregate bucket data... #>   |-[8] Calculating VPIN vector... #> [+] VPIN estimation completed  # Display a description of the estimate  show(estimate) #> ---------------------------------- #> VPIN estimation completed successfully #> ---------------------------------- #> Type object@vpin to access the VPIN vector.  #> Type object@bucketdata to access data used to construct  the VPIN vector.  #> Type object@dailyvpin to access the daily VPIN vectors. #>  #>  VPIN model   #>  #> Table:  [+] VPIN descriptive statistics #>  #>  Min.    1st Qu.    Median    Mean    3rd Qu.    Max.    NA's  #> ------  ---------  --------  ------  ---------  ------  ------ #>  0.18     0.23       0.25     0.27     0.29      0.41    249   #>  #>  #> Table:  [+] VPIN parameters #>  #>  tbSize    buckets    samplength      VBS       #days  #> --------  ---------  ------------  ----------  ------- #>   300        50          250        3836.547     73    #>  #> ------- #> Running time: 2.665 seconds  # Plot the estimated VPIN vector  plot(estimate@vpin, type = \"l\", xlab = \"time\", ylab = \"VPIN\", col = \"blue\")   # Display the parameters of VPIN estimates  show(estimate@parameters) #>     tbSize    buckets samplength        VBS      #days  #>    300.000     50.000    250.000   3836.547     73.000   # Store the computed data of the different buckets in a dataframe 'buckets'. # Display the first 10 rows of the dataframe 'buckets'.  buckets <- estimate@bucketdata show(head(buckets, 10)) #>    bucket agg.bvol    agg.svol       aoi           starttime #> 1       1 1826.317 2010.230237  183.9131 2018-10-18 00:11:33 #> 2       2 1595.625 2240.921968  645.2965 2018-10-18 01:01:33 #> 3       3 2070.871 1765.676155  305.1951 2018-10-18 01:41:33 #> 4       4 2470.324 1366.223178 1104.1010 2018-10-18 02:51:33 #> 5       5 2102.734 1733.812999  368.9214 2018-10-18 03:36:33 #> 6       6 3835.394    1.153561 3834.2403 2018-10-18 04:31:33 #> 7       7 3835.394    1.153561 3834.2403 2018-10-18 04:31:33 #> 8       8 3835.394    1.153561 3834.2403 2018-10-18 04:31:33 #> 9       9 3835.394    1.153561 3834.2403 2018-10-18 04:31:33 #> 10     10 3829.606    6.941283 3822.6648 2018-10-18 04:31:33 #>                endtime vpin duration #> 1  2018-10-18 01:01:33   NA     3000 #> 2  2018-10-18 01:41:33   NA     2400 #> 3  2018-10-18 02:51:33   NA     4200 #> 4  2018-10-18 03:36:33   NA     2700 #> 5  2018-10-18 04:31:33   NA     3300 #> 6  2018-10-18 04:31:33   NA        0 #> 7  2018-10-18 04:31:33   NA        0 #> 8  2018-10-18 04:31:33   NA        0 #> 9  2018-10-18 04:31:33   NA        0 #> 10 2018-10-18 04:36:33   NA      300  # Store the daily VPIN values (weighted and unweighted) in a dataframe # 'dayvpin'.  # Display the first 10 rows of the dataframe 'dayvpin'.  dayvpin <- estimate@dailyvpin show(head(dayvpin, 10)) #>           day     dvpin dvpin_weighted #> 1  2018-10-22 0.2401930      0.2505410 #> 2  2018-10-23 0.2179078      0.2179678 #> 3  2018-10-24 0.2028352      0.2017931 #> 4  2018-10-25 0.1959551      0.1954544 #> 5  2018-10-26 0.1903389      0.1911104 #> 6  2018-10-27 0.2128983      0.2132257 #> 7  2018-10-31 0.2116881      0.2115984 #> 8  2018-11-01 0.2229720      0.2275468 #> 9  2018-11-07 0.2328595      0.2354824 #> 10 2018-11-08 0.2409957      0.2409957"},{"path":[]},{"path":"https://www.pinstimation.com/research.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Scientific Research","text":"package ‘PINstimation’ implements original research authors, led four research articles: first article provides comprehensive overview package: details underlying theoretical background, provides thorough description functions, using tackle relevant research questions. second article presents methodological approach computational problems estimation adjusted probability informed trading Duarte Young (2009). third article presents theoretical derivation, empirical investigation estimation PIN models using expectation-conditional maximization (ECM) algorithm. fourth articles develops algorithm detection information layers trade data, line model multilayer probability informed trading Ersan (2016).  ","code":""},{"path":"https://www.pinstimation.com/research.html","id":"research-papers","dir":"","previous_headings":"","what":"Research papers","title":"Scientific Research","text":", give relatively detailed description articles related package. report abstract paper, link download , well functions implemented research paper.  ","code":""},{"path":[]},{"path":"https://www.pinstimation.com/research.html","id":"abstract","dir":"","previous_headings":"Research papers > PINstimation: An R package for estimating models of probability of informed trading","what":"Abstract","title":"Scientific Research","text":"purpose paper introduce R package PINstimation. package designed estimating, precise fast way, probability informed trading models implementation main estimation methods suggested literature far. models covered original PIN model Easley O’Hara (1992), Easley et al. (1996); multilayer PIN model Ersan (2016); adjusted PIN model Duarte Young (2009); volume-synchronized PIN Easley, De Prado, O’Hara (2011), Easley, López De Prado, O’Hara (2012). core functionalities package supplemented utilities data simulation, aggregation classification tools. addition detailed overview package functions, arguments, outputs, included theoretical review methods behind functions presenting major challenges related solutions. Finally, conduct two applications trade-level data 58 Swedish stocks, report straightforward, comparative intriguing findings informed trading. applications aim highlight capabilities package tackling relevant research questions provide instances wide possibilities use PINstimation academicians practitioners.","code":""},{"path":"https://www.pinstimation.com/research.html","id":"download","dir":"","previous_headings":"Research papers > PINstimation: An R package for estimating models of probability of informed trading","what":"Download","title":"Scientific Research","text":"Data: trade-level data 58 Swedish stocks used paper available download . Article: article available SSRN.  ","code":""},{"path":[]},{"path":"https://www.pinstimation.com/research.html","id":"abstract-1","dir":"","previous_headings":"Research papers > A methodological approach to the computational problems in the estimation of adjusted PIN model","what":"Abstract","title":"Scientific Research","text":"well documented computational problems may lead large biases estimation probability informed trading (PIN) models. effective remedial solutions suggested case original PIN model (Easley et al., 1996), computational problems broadly applied extension, adjusted PIN model Duarte Young (2009) , yet addressed. Given larger parameter set, estimates AdjPIN model likely suffer computational problems. address computational problems developing estimation method comprising ) logarithmic factorization likelihood function, b) algorithm strategically generate initial parameter sets. show introduced method outperforms existing best-practices strongly suggest use studies.","code":""},{"path":"https://www.pinstimation.com/research.html","id":"functions","dir":"","previous_headings":"Research papers > A methodological approach to the computational problems in the estimation of adjusted PIN model","what":"Functions","title":"Scientific Research","text":"paper derives factorization likelihood function AdjPIN model, well proposes strategic, efficient algorithm derive initial parameter sets prime maximum likelihood estimation model, either using standard methods, expectation-conditional maximization algorithm. function implements factorization likelihood function fact_adjpin(); function implements algorithm initial parameter sets initials_adjpin().","code":""},{"path":"https://www.pinstimation.com/research.html","id":"download-1","dir":"","previous_headings":"Research papers > A methodological approach to the computational problems in the estimation of adjusted PIN model","what":"Download","title":"Scientific Research","text":"article available SSRN.  ","code":""},{"path":[]},{"path":"https://www.pinstimation.com/research.html","id":"abstract-2","dir":"","previous_headings":"Research papers > Estimation of the Probability of Informed Trading Models Via an Expectation-Conditional Maximization Algorithm","what":"Abstract","title":"Scientific Research","text":"PIN model extensions proven challenging estimation, suffer several computational problems. set paper address computational issues proposing use expectation-conditional maximization (ECM) algorithm estimate various models probability informed trading. particular, derive optimal estimates two extensions original PIN model, MPIN model introduced Ersan (2016), adjusted PIN Duarte Young (2009)), well restricted variants. derivation provides reliable mathematically sound method estimation number information layers MPIN model, well , stable estimates adjusted PIN model despite large number free variables. show maximum likelihood estimation via ECM algorithm faster, reliable, provides viable alternative standard methods used literature. addition providing accurate estimates probability parameters, ECM algorithm allows endogenous determination number layers MPIN model. paper served basis implementation ECM estimation R package dedicated estimation probability informed trading models: PINstimation.","code":""},{"path":"https://www.pinstimation.com/research.html","id":"functions-1","dir":"","previous_headings":"Research papers > Estimation of the Probability of Informed Trading Models Via an Expectation-Conditional Maximization Algorithm","what":"Functions","title":"Scientific Research","text":"paper details theoretical adaptation ECM algorithm estimate MPIN model Ersan (2016), adjusted PIN model Duarte Young (2009). functions package implements estimation MPIN model mpin_ecm(); one implementing estimation AdjPIN model adjpin().","code":""},{"path":"https://www.pinstimation.com/research.html","id":"download-2","dir":"","previous_headings":"Research papers > Estimation of the Probability of Informed Trading Models Via an Expectation-Conditional Maximization Algorithm","what":"Download","title":"Scientific Research","text":"article available SSRN.  ","code":""},{"path":[]},{"path":"https://www.pinstimation.com/research.html","id":"abstract-3","dir":"","previous_headings":"Research papers > Identifying information types in probability of informed trading (PIN) models: An improved algorithm","what":"Abstract","title":"Scientific Research","text":"multilayer probability informed trading (MPIN) model, developed Ersan (2016), releases assumption single type information events original PIN model Easley et al. (1996). Identification number layers dataset applied layer detection algorithm suggested Ersan (2016). algorithm based clustering absolute order imbalances examination confidence intervals skellam distribution. uninformed trading intensity assumed identical buy sell sides, algorithm performs extremely well. uninformed intensities equal, Ersan (2016) suggests adjustment data using correction term, proxied minimum levels buys sells data. improve algorithm Ersan (2016) two ways. provide accurate estimates uninformed trading intensities used data adjustment, slightly modify algorithm determining information layers. improved algorithm identifies number layers substantially increased precision, 86% 95% accuracy simulated data various settings.","code":""},{"path":"https://www.pinstimation.com/research.html","id":"functions-2","dir":"","previous_headings":"Research papers > Identifying information types in probability of informed trading (PIN) models: An improved algorithm","what":"Functions","title":"Scientific Research","text":"paper develops algorithm detect number layers trade dataset, inline MPIN model Ersan (2016). function implementing algorithm detectlayers_eg(), constitutes improvement previous algorithm developed Ersan (2016), implemented detectlayers_e().","code":""},{"path":"https://www.pinstimation.com/research.html","id":"download-3","dir":"","previous_headings":"Research papers > Identifying information types in probability of informed trading (PIN) models: An improved algorithm","what":"Download","title":"Scientific Research","text":"article available SSRN.","code":""},{"path":"https://www.pinstimation.com/news/index.html","id":"pinstimation-010","dir":"Changelog","previous_headings":"","what":"PINstimation 0.1.0","title":"PINstimation 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
